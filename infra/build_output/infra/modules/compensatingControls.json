{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.5.1644",
      "templateHash": "17559800121958645537"
    }
  },
  "parameters": {
    "apimName": {
      "type": "string",
      "metadata": {
        "description": "The name of the API Management service."
      }
    },
    "maxDataTransferSize": {
      "type": "int",
      "defaultValue": 1024,
      "metadata": {
        "description": "The maximum data transfer size in KB"
      }
    },
    "maxRequestsPerTimeWindow": {
      "type": "int",
      "defaultValue": 100,
      "metadata": {
        "description": "The maximum number of requests per time window"
      }
    },
    "timeWindowInSeconds": {
      "type": "int",
      "defaultValue": 60,
      "metadata": {
        "description": "The time window in seconds"
      }
    },
    "allowedIpRanges": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Allowed IP ranges"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.ApiManagement/service/policies",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/policy', parameters('apimName'))]",
      "properties": {
        "format": "xml",
        "value": "<policies>\n    <inbound>\n        <!-- Rate limiting per IP -->\n        <rate-limit-by-key \n            calls=\"${maxRequestsPerTimeWindow}\" \n            renewal-period=\"${timeWindowInSeconds}\"\n            counter-key=\"@(context.Request.IpAddress)\" />\n        \n        <!-- Request size limiting -->\n        <set-variable name=\"requestSize\" value=\"@(context.Request.Headers[\"Content-Length\"])\" />\n        <check-variable name=\"requestSize\" operator=\"LessThan\" value=\"${maxDataTransferSize * 1024}\" />\n        \n        <!-- Enhanced logging -->\n        <set-variable name=\"requestTimestamp\" value=\"@(DateTime.UtcNow.ToString())\" />\n        <set-variable name=\"requestSize\" value=\"@(context.Request.Headers[\"Content-Length\"])\" />\n        <log-to-eventhub logger-id=\"data-access-logger\">\n            @{\n                return new JObject(\n                    new JProperty(\"timestamp\", context.Variables[\"requestTimestamp\"]),\n                    new JProperty(\"ipAddress\", context.Request.IpAddress),\n                    new JProperty(\"method\", context.Request.Method),\n                    new JProperty(\"url\", context.Request.Url),\n                    new JProperty(\"requestSize\", context.Variables[\"requestSize\"]),\n                    new JProperty(\"subscriptionId\", context.Subscription?.Id),\n                    new JProperty(\"userId\", context.User?.Id)\n                ).ToString();\n            }\n        </log-to-eventhub>\n\n        <!-- Request validation -->\n        <validate-content type=\"application/json\" validate-as=\"json\" />\n        \n        <!-- Schema validation if OpenAPI spec is available -->\n        <validate-json-schema specification-path=\"apis\" />\n        \n        <!-- Security headers -->\n        <set-header name=\"X-Content-Type-Options\" exists-action=\"override\">\n            <value>nosniff</value>\n        </set-header>\n        <set-header name=\"X-Frame-Options\" exists-action=\"override\">\n            <value>DENY</value>\n        </set-header>\n        <set-header name=\"Content-Security-Policy\" exists-action=\"override\">\n            <value>default-src 'self'</value>\n        </set-header>\n        \n        <base />\n    </inbound>\n    <backend>\n        <forward-request timeout=\"60\" />\n    </backend>\n    <outbound>\n        <!-- Response size monitoring -->\n        <set-variable name=\"responseSize\" value=\"@(context.Response.Headers[\"Content-Length\"])\" />\n        <log-to-eventhub logger-id=\"data-access-logger\">\n            @{\n                return new JObject(\n                    new JProperty(\"timestamp\", context.Variables[\"requestTimestamp\"]),\n                    new JProperty(\"responseSize\", context.Variables[\"responseSize\"]),\n                    new JProperty(\"statusCode\", context.Response.StatusCode)\n                ).ToString();\n            }\n        </log-to-eventhub>\n        \n        <!-- Remove sensitive headers -->\n        <set-header name=\"Server\" exists-action=\"delete\" />\n        <set-header name=\"X-Powered-By\" exists-action=\"delete\" />\n        <set-header name=\"X-AspNet-Version\" exists-action=\"delete\" />\n        \n        <base />\n    </outbound>\n    <on-error>\n        <!-- Error logging -->\n        <log-to-eventhub logger-id=\"error-logger\">\n            @{\n                return new JObject(\n                    new JProperty(\"timestamp\", DateTime.UtcNow.ToString()),\n                    new JProperty(\"source\", context.LastError.Source),\n                    new JProperty(\"reason\", context.LastError.Reason),\n                    new JProperty(\"message\", context.LastError.Message)\n                ).ToString();\n            }\n        </log-to-eventhub>\n        <base />\n    </on-error>\n</policies>\n"
      }
    }
  ]
}