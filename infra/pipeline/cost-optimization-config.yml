# Cost Optimization Configuration
# This file controls both deployment-time resource selection and runtime optimization behavior
# Adjust these parameters based on your development and testing needs

# Global switch for cost optimization
# Set to false to disable all optimizations at once
costOptimizationEnabled: true

# ===========================================
# DEPLOYMENT-TIME COST OPTIMIZATION FLAGS
# ===========================================
# These control which expensive resources get deployed in the first place
# Use these to avoid deploying costly 24/7 charging resources during development

deploymentFlags:
  # Microsoft Fabric (F2 = $525/month minimum)
  deployFabric:
    dev: false      # Skip Fabric in dev - use local Power BI for testing
    sit: false      # Skip in system integration testing
    uat: true       # Deploy for user acceptance testing
    prod: true      # Deploy in production
  
  # Azure Kubernetes Service (~$420/month for 3 nodes)
  deployAKS:
    dev: false      # Use Container Instances instead for dev
    sit: true       # Need for integration testing
    uat: true       # Deploy for user testing
    prod: true      # Deploy in production
  
  # Azure Machine Learning (~$200+ for compute instances)
  deployMachineLearning:
    dev: true       # Keep for ML development
    sit: false      # Skip for system testing
    uat: true       # Deploy for user testing
    prod: true      # Deploy in production
  
  # Microsoft Purview (~$400/month minimum)
  deployPurview:
    dev: false      # Skip data governance in dev
    sit: false      # Skip for system testing
    uat: true       # Deploy for user testing
    prod: true      # Deploy in production
  
  # Synapse Dedicated SQL Pools (~$1200/month for DW100c)
  deploySynapseDedicatedSQL:
    dev: false      # Use serverless SQL only
    sit: false      # Use serverless SQL only
    uat: false      # Use serverless SQL only
    prod: false     # Consider if really needed
  
  # Self-Hosted Integration Runtime VM (~$140/month)
  deploySHIR:
    dev: false      # Skip on-premises integration in dev
    sit: false      # Skip for system testing
    uat: true       # Deploy for user testing
    prod: true      # Deploy in production
  
  # Azure Container Instances (pay-per-use, but can add up)
  deployContainerInstances:
    dev: true       # Use instead of AKS for dev
    sit: true       # Keep for testing
    uat: true       # Deploy for user testing
    prod: true      # Deploy in production
  
  # Logic Apps Standard (~$200/month base)
  deployLogicApps:
    dev: true       # Keep for development
    sit: true       # Keep for testing
    uat: true       # Deploy for user testing
    prod: true      # Deploy in production
  
  # Cognitive Services (varies by tier)
  deployCognitiveServices:
    dev: true       # Keep for AI development
    sit: true       # Keep for testing
    uat: true       # Deploy for user testing
    prod: true      # Deploy in production
  
  # Azure Maps (varies by tier)
  deployAzureMaps:
    dev: true       # Keep for location services development
    sit: true       # Keep for testing
    uat: true       # Deploy for user testing
    prod: true      # Deploy in production

# ===========================================
# RUNTIME COST OPTIMIZATION FLAGS
# ===========================================
# These control runtime behavior of deployed resources

# Environment-specific configurations
# These settings override the default configurations for specific environments
environments:
  dev:
    # Synapse Analytics Controls
    synapseSqlPoolsPause: true      # Control automatic pausing of SQL pools
    synapseShirOptimize: false      # Keep false if you need SHIR for development
    
    # Compute Resources
    appServiceScaleDown: true       # Scale down App Service Plans to minimum SKU
    vmDeallocate: true             # Deallocate development VMs when not in use
    aksScaleDown: true             # Scale down AKS node pools to minimum
    
    # Event Processing
    eventHubsScaleDown: true       # Scale down Event Hubs to Standard tier
    
    # Retention Periods (in days)
    logRetentionDays: 7            # Shorter retention for dev logs
    backupRetentionDays: 7         # Shorter retention for dev backups

  sit:
    # Testing environment might need more resources available
    synapseSqlPoolsPause: true
    synapseShirOptimize: false     # Keep SHIR running for integration tests
    appServiceScaleDown: true
    vmDeallocate: false           # Keep VMs running for continuous testing
    aksScaleDown: true
    eventHubsScaleDown: true
    logRetentionDays: 14
    backupRetentionDays: 14

  uat:
    synapseSqlPoolsPause: false    # Keep resources running for user acceptance testing
    synapseShirOptimize: false
    appServiceScaleDown: false
    vmDeallocate: false
    aksScaleDown: false
    eventHubsScaleDown: false
    logRetentionDays: 30
    backupRetentionDays: 30

  prod:
    # Production environment - minimal cost optimization
    synapseSqlPoolsPause: false    # No automatic pausing in production
    synapseShirOptimize: false     # No SHIR optimization in production
    appServiceScaleDown: false     # Maintain production performance
    vmDeallocate: false           # Keep production VMs running
    aksScaleDown: false           # Maintain production AKS capacity
    eventHubsScaleDown: false     # Maintain production Event Hubs tier
    logRetentionDays: 90         # Longer retention for production
    backupRetentionDays: 90      # Longer retention for production backups

# Resource-specific thresholds and schedules
thresholds:
  # Idle time thresholds (in minutes) before resource optimization
  synapseSqlPoolIdleTime: 60      # Time before pausing SQL pools
  vmIdleTime: 120                 # Time before deallocating VMs
  
  # Scale down thresholds
  appServiceMinInstances: 1       # Minimum instances to maintain
  aksMinNodes: 1                 # Minimum AKS nodes to maintain
  eventHubsMinThroughput: 1      # Minimum Event Hubs throughput units

# Schedule windows (in UTC)
schedules:
  # Define time windows when optimizations should NOT run
  # Format: "HH:MM-HH:MM"
  businessHours: "08:00-18:00"    # No optimizations during business hours
  maintenanceWindow: "22:00-04:00" # Preferred time for optimization tasks