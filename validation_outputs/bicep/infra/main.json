{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.5.1644",
      "templateHash": "13636260554578425962"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "switzerlandnorth",
      "metadata": {
        "description": "Azure region for all resources. Defaults to Switzerland North to satisfy data residency requirements."
      }
    },
    "azureMapsLocation": {
      "type": "string",
      "defaultValue": "global",
      "metadata": {
        "description": "Location used for the Azure Maps account (Azure Maps is a global resource). Leave empty to use global location parameter."
      }
    },
    "machineLearningLocation": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Location for Azure Machine Learning workspace. Leave empty to use global location parameter."
      }
    },
    "aksLocation": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Location for Azure Kubernetes Service. Leave empty to use global location parameter."
      }
    },
    "fabricLocation": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Location for Microsoft Fabric capacity. Leave empty to use global location parameter."
      }
    },
    "purviewLocation": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Location for Microsoft Purview account. Leave empty to use global location parameter."
      }
    },
    "containerInstancesLocation": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Location for Azure Container Instances. Leave empty to use global location parameter."
      }
    },
    "cognitiveServicesLocation": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Location for Cognitive Services. Leave empty to use global location parameter."
      }
    },
    "namePrefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix used for resource names. Should be 3-11 characters to comply with Azure naming rules."
      }
    },
    "environment": {
      "type": "string",
      "metadata": {
        "description": "Environment name suffix appended to select resources (e.g., dev, test, prod)."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
        "project": "gpt-data-platform"
      },
      "metadata": {
        "description": "Default tags applied to every resource deployed by this template."
      }
    },
    "vnetAddressSpace": {
      "type": "string",
      "defaultValue": "10.10.0.0/21",
      "metadata": {
        "description": "CIDR block for the data platform virtual network."
      }
    },
    "subnetAddressPrefixes": {
      "type": "object",
      "defaultValue": {
        "functionApps": "10.10.0.0/26",
        "integration": "10.10.0.64/26",
        "privateEndpoints": "10.10.0.128/26",
        "selfHostedIntegrationRuntime": "10.10.0.192/27",
        "apim": "10.10.0.224/27"
      },
      "metadata": {
        "description": "CIDR allocations for the core subnets used by the platform."
      }
    },
    "dataLakeFilesystem": {
      "type": "string",
      "defaultValue": "raw",
      "metadata": {
        "description": "Name of the primary data lake filesystem created within the storage account."
      }
    },
    "logicAppSku": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard"
      ],
      "metadata": {
        "description": "Logic App Standard SKU. For VNet integration, a minimum of Standard is recommended."
      }
    },
    "functionPlanSku": {
      "type": "string",
      "defaultValue": "EP1",
      "allowedValues": [
        "EP1",
        "EP2",
        "EP3"
      ],
      "metadata": {
        "description": "Azure Functions plan SKU for compute workloads that require VNet integration."
      }
    },
    "synapseSqlAdminLogin": {
      "type": "string",
      "metadata": {
        "description": "Administrator login for the Synapse dedicated SQL pool (metadata operations only)."
      }
    },
    "synapseSqlAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Administrator password for the Synapse dedicated SQL pool."
      }
    },
    "onDemandSharedSecret": {
      "type": "securestring",
      "metadata": {
        "description": "Shared secret used for authenticating HTTP requests to the on-demand Logic App workflow."
      }
    },
    "ingestionEventTopicName": {
      "type": "string",
      "defaultValue": "[format('{0}{1}egtopic', parameters('namePrefix'), parameters('environment'))]",
      "metadata": {
        "description": "Name of the Event Grid topic used to trigger orchestration workloads."
      }
    },
    "allowedPublicIpRanges": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional IP ranges permitted to access publicly exposed endpoints (e.g., Function App SCM). Leave empty to block public ingress."
      }
    },
    "securityGroups": {
      "type": "object",
      "defaultValue": {
        "platformAdmins": "",
        "platformOperators": "",
        "platformDevelopers": "",
        "platformReaders": "",
        "mlEngineers": "",
        "dataAnalysts": "",
        "dataScientists": "",
        "dataEngineers": "",
        "dataGovernanceTeam": ""
      },
      "metadata": {
        "description": "Security Group Object IDs for RBAC assignments. Leave empty to skip group-based assignments."
      }
    },
    "deployFabric": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Microsoft Fabric capacity. Charges continuously based on capacity units (F2=$525/month minimum)."
      }
    },
    "deployAKS": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Azure Kubernetes Service. Charges for node VMs 24/7 (~$420/month minimum for 3 nodes)."
      }
    },
    "deployMachineLearning": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Azure Machine Learning workspace with compute. ML compute instances charge continuously."
      }
    },
    "deployPurview": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Microsoft Purview for data governance. Charges for capacity units continuously (~$400/month minimum)."
      }
    },
    "deploySynapseDedicatedSQL": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploy Synapse dedicated SQL pools. Dedicated pools charge continuously unlike serverless (~$1200/month for DW100c)."
      }
    },
    "deploySHIR": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploy Self-Hosted Integration Runtime VM. VM charges 24/7 when running (~$140/month for Standard_D2s_v3)."
      }
    },
    "deployContainerInstances": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Azure Container Instances. ACI charges for allocated CPU/memory continuously."
      }
    },
    "deployLogicApps": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Logic Apps Standard plan. Standard plan charges for allocated capacity (~$200/month base)."
      }
    },
    "deployCognitiveServices": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Cognitive Services. Some tiers have minimum monthly charges."
      }
    },
    "deployAzureMaps": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Azure Maps. Standard pricing tier has monthly minimums."
      }
    }
  },
  "variables": {
    "privateDnsZoneSuffixes": [
      "[format('blob.{0}', environment().suffixes.storage)]",
      "[format('dfs.{0}', environment().suffixes.storage)]",
      "[format('queue.{0}', environment().suffixes.storage)]",
      "[format('table.{0}', environment().suffixes.storage)]",
      "[format('file.{0}', environment().suffixes.storage)]",
      "[format('web.{0}', environment().suffixes.storage)]",
      "[format('{0}', environment().suffixes.sqlServerHostname)]",
      "database.windows.net",
      "[format('vault.{0}', environment().suffixes.keyvaultDns)]",
      "servicebus.windows.net",
      "azurewebsites.net",
      "eventgrid.azure.net",
      "[format('{0}', environment().resourceManager)]"
    ],
    "actualAzureMapsLocation": "[if(empty(parameters('azureMapsLocation')), parameters('location'), parameters('azureMapsLocation'))]",
    "actualMachineLearningLocation": "[if(empty(parameters('machineLearningLocation')), parameters('location'), parameters('machineLearningLocation'))]",
    "actualAksLocation": "[if(empty(parameters('aksLocation')), parameters('location'), parameters('aksLocation'))]",
    "actualFabricLocation": "[if(empty(parameters('fabricLocation')), parameters('location'), parameters('fabricLocation'))]",
    "actualPurviewLocation": "[if(empty(parameters('purviewLocation')), parameters('location'), parameters('purviewLocation'))]",
    "actualContainerInstancesLocation": "[if(empty(parameters('containerInstancesLocation')), parameters('location'), parameters('containerInstancesLocation'))]",
    "actualCognitiveServicesLocation": "[if(empty(parameters('cognitiveServicesLocation')), parameters('location'), parameters('cognitiveServicesLocation'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "naming",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "namePrefix": {
            "value": "[parameters('namePrefix')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "10016591118024602241"
            }
          },
          "parameters": {
            "namePrefix": {
              "type": "string"
            },
            "environment": {
              "type": "string"
            }
          },
          "variables": {
            "naming": {
              "prefix": "[parameters('namePrefix')]",
              "eventHubNamespace": "[format('{0}-evthub-{1}', parameters('namePrefix'), parameters('environment'))]",
              "eventGridTopic": "[format('{0}-evtgrid-{1}', parameters('namePrefix'), parameters('environment'))]",
              "functionApp": "[format('{0}-func-{1}', parameters('namePrefix'), parameters('environment'))]",
              "functionPlan": "[format('{0}-plan-{1}', parameters('namePrefix'), parameters('environment'))]",
              "keyVault": "[format('{0}-kv-{1}', parameters('namePrefix'), parameters('environment'))]",
              "logAnalytics": "[format('{0}-log-{1}', parameters('namePrefix'), parameters('environment'))]",
              "logicApp": "[format('{0}-logic-{1}', parameters('namePrefix'), parameters('environment'))]",
              "storage": "[format('{0}stor{1}', parameters('namePrefix'), parameters('environment'))]",
              "synapse": "[format('{0}-syn-{1}', parameters('namePrefix'), parameters('environment'))]",
              "vnet": "[format('{0}-vnet-{1}', parameters('namePrefix'), parameters('environment'))]",
              "cognitiveServices": "[format('{0}-cog-{1}', parameters('namePrefix'), parameters('environment'))]",
              "azureMaps": "[format('{0}-maps-{1}', parameters('namePrefix'), parameters('environment'))]",
              "purview": "[format('{0}-purview-{1}', parameters('namePrefix'), parameters('environment'))]",
              "machineLearning": "[format('{0}-ml-{1}', parameters('namePrefix'), parameters('environment'))]",
              "kubernetes": "[format('{0}-aks-{1}', parameters('namePrefix'), parameters('environment'))]",
              "fabric": "[format('{0}-fabric-{1}', parameters('namePrefix'), parameters('environment'))]",
              "containerInstances": "[format('{0}-aci-{1}', parameters('namePrefix'), parameters('environment'))]",
              "comprehensiveApiGateway": "[format('{0}-apigw-{1}', parameters('namePrefix'), parameters('environment'))]"
            }
          },
          "resources": [],
          "outputs": {
            "naming": {
              "type": "object",
              "value": "[variables('naming')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "logging",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.logAnalytics]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "9064446766332781968"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Log Analytics workspace for centralized monitoring."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for the workspace."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags applied to the workspace."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2022-10-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "name": "PerGB2018"
                },
                "retentionInDays": 30,
                "features": {
                  "enableLogAccessUsingOnlyResourcePermissions": true
                }
              }
            }
          ],
          "outputs": {
            "workspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
            },
            "workspaceResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'naming')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "networking",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.vnet]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "addressSpace": {
            "value": "[parameters('vnetAddressSpace')]"
          },
          "subnetAddressPrefixes": {
            "value": "[parameters('subnetAddressPrefixes')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "6671355968664339070"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the virtual network hosting the data platform resources."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for the network resources."
              }
            },
            "addressSpace": {
              "type": "string",
              "metadata": {
                "description": "Address space allocated to the virtual network."
              }
            },
            "subnetAddressPrefixes": {
              "type": "object",
              "metadata": {
                "description": "Subnet CIDR prefixes for platform components."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Resource tags applied to networking assets."
              }
            }
          },
          "variables": {
            "$fxv#0": {
              "name": "apim-nsg",
              "properties": {
                "securityRules": [
                  {
                    "name": "Management_endpoint",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "3443",
                      "sourceAddressPrefix": "ApiManagement",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 100,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "Client_communication_to_API",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRanges": [
                        "80",
                        "443"
                      ],
                      "sourceAddressPrefix": "Internet",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 110,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "Azure_infrastructure_load_balancer",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "6390",
                      "sourceAddressPrefix": "AzureLoadBalancer",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 120,
                      "direction": "Inbound"
                    }
                  }
                ]
              }
            },
            "functionSubnetName": "function-apps",
            "integrationSubnetName": "integration",
            "privateEndpointSubnetName": "private-endpoints",
            "irSubnetName": "self-hosted-ir",
            "apimSubnetName": "apim"
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-07-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('addressSpace')]"
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}-nat-pip', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "publicIPAllocationMethod": "Static"
              }
            },
            {
              "type": "Microsoft.Network/natGateways",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}-nat', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "idleTimeoutInMinutes": 10,
                "publicIpAddresses": [
                  {
                    "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-nat-pip', parameters('name')))]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-nat-pip', parameters('name')))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}-func-nsg', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}-integration-nsg', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}-pe-nsg', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}-ir-nsg', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('name'), variables('functionSubnetName'))]",
              "properties": {
                "addressPrefix": "[parameters('subnetAddressPrefixes').functionApps]",
                "delegations": [
                  {
                    "name": "delegation",
                    "properties": {
                      "serviceName": "Microsoft.Web/serverFarms"
                    }
                  }
                ],
                "privateEndpointNetworkPolicies": "Enabled",
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-func-nsg', parameters('name')))]"
                },
                "natGateway": {
                  "id": "[resourceId('Microsoft.Network/natGateways', format('{0}-nat', parameters('name')))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-func-nsg', parameters('name')))]",
                "[resourceId('Microsoft.Network/natGateways', format('{0}-nat', parameters('name')))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('name'), variables('integrationSubnetName'))]",
              "properties": {
                "addressPrefix": "[parameters('subnetAddressPrefixes').integration]",
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-integration-nsg', parameters('name')))]"
                },
                "natGateway": {
                  "id": "[resourceId('Microsoft.Network/natGateways', format('{0}-nat', parameters('name')))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-integration-nsg', parameters('name')))]",
                "[resourceId('Microsoft.Network/natGateways', format('{0}-nat', parameters('name')))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('name'), variables('privateEndpointSubnetName'))]",
              "properties": {
                "addressPrefix": "[parameters('subnetAddressPrefixes').privateEndpoints]",
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-pe-nsg', parameters('name')))]"
                },
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Disabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-pe-nsg', parameters('name')))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}-apim-nsg', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": "[variables('$fxv#0').properties]"
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('name'), variables('apimSubnetName'))]",
              "properties": {
                "addressPrefix": "[parameters('subnetAddressPrefixes').apim]",
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-apim-nsg', parameters('name')))]"
                },
                "serviceEndpoints": [
                  {
                    "service": "Microsoft.Web"
                  },
                  {
                    "service": "Microsoft.KeyVault"
                  }
                ],
                "delegations": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-apim-nsg', parameters('name')))]",
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('name'), variables('functionSubnetName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('name'), variables('irSubnetName'))]",
              "properties": {
                "addressPrefix": "[parameters('subnetAddressPrefixes').selfHostedIntegrationRuntime]",
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-ir-nsg', parameters('name')))]"
                },
                "natGateway": {
                  "id": "[resourceId('Microsoft.Network/natGateways', format('{0}-nat', parameters('name')))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-ir-nsg', parameters('name')))]",
                "[resourceId('Microsoft.Network/natGateways', format('{0}-nat', parameters('name')))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "vnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
            },
            "functionSubnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('name'), variables('functionSubnetName'))]"
            },
            "integrationSubnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('name'), variables('integrationSubnetName'))]"
            },
            "privateEndpointsSubnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('name'), variables('privateEndpointSubnetName'))]"
            },
            "selfHostedIntegrationRuntimeSubnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('name'), variables('irSubnetName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'naming')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "privateDns",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "zoneSuffixes": {
            "value": "[variables('privateDnsZoneSuffixes')]"
          },
          "vnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networking'), '2025-04-01').outputs.vnetId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "563290849737304139"
            }
          },
          "parameters": {
            "zoneSuffixes": {
              "type": "array",
              "metadata": {
                "description": "Private DNS zone suffixes to create for private endpoint resolution."
              }
            },
            "vnetId": {
              "type": "string",
              "metadata": {
                "description": "Virtual network to link with the private DNS zones."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags applied to the DNS zones."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "zones",
                "count": "[length(parameters('zoneSuffixes'))]",
                "input": {
                  "name": "[format('privatelink.{0}', parameters('zoneSuffixes')[copyIndex('zones')])]"
                }
              }
            ]
          },
          "resources": [
            {
              "copy": {
                "name": "privateDnsZones",
                "count": "[length(variables('zones'))]"
              },
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('zones')[copyIndex()].name]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "copy": {
                "name": "vnetLinks",
                "count": "[length(variables('zones'))]"
              },
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', variables('zones')[copyIndex()].name, format('link-{0}', last(split(parameters('vnetId'), '/'))))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[parameters('vnetId')]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('zones')[copyIndex()].name)]"
              ]
            }
          ],
          "outputs": {
            "privateDnsZoneIds": {
              "type": "array",
              "copy": {
                "count": "[length(range(0, length(variables('zones'))))]",
                "input": "[resourceId('Microsoft.Network/privateDnsZones', variables('zones')[range(0, length(variables('zones')))[copyIndex()]].name)]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'networking')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "keyVault",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.keyVault]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logging'), '2025-04-01').outputs.workspaceId.value]"
          },
          "allowedPublicIpRanges": {
            "value": "[parameters('allowedPublicIpRanges')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "14997830306871339380"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Key Vault instance."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for Key Vault deployment."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags applied to Key Vault resources."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace for diagnostics."
              }
            },
            "allowedPublicIpRanges": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "IP ranges permitted to access the Key Vault over public endpoint. Empty array blocks public network access."
              }
            }
          },
          "variables": {
            "defaultNetworkRuleAction": "[if(empty(parameters('allowedPublicIpRanges')), 'Deny', 'Allow')]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "tenantId": "[subscription().tenantId]",
                "enableRbacAuthorization": true,
                "enablePurgeProtection": true,
                "enableSoftDelete": true,
                "enabledForTemplateDeployment": true,
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "networkAcls": {
                  "copy": [
                    {
                      "name": "ipRules",
                      "count": "[length(parameters('allowedPublicIpRanges'))]",
                      "input": {
                        "value": "[parameters('allowedPublicIpRanges')[copyIndex('ipRules')]]"
                      }
                    }
                  ],
                  "bypass": "AzureServices",
                  "defaultAction": "[variables('defaultNetworkRuleAction')]"
                }
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
              "name": "[format('{0}-logs', parameters('name'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "AuditEvent",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "keyVaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'logging')]",
        "[resourceId('Microsoft.Resources/deployments', 'naming')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "storage",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.storage]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "filesystemName": {
            "value": "[parameters('dataLakeFilesystem')]"
          },
          "runtimeContainerName": {
            "value": "runtime"
          },
          "containerNames": {
            "value": [
              "bronze",
              "silver",
              "gold",
              "test",
              "functional",
              "raw",
              "curated",
              "locks",
              "config",
              "temp",
              "checkpoints",
              "logs",
              "metadata",
              "archive",
              "quarantine"
            ]
          },
          "queueNames": {
            "value": [
              "events-synapse",
              "events-synapse-dlq"
            ]
          },
          "tableNames": {
            "value": [
              "ProcessedMessages",
              "RunHistory"
            ]
          },
          "privateEndpointSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networking'), '2025-04-01').outputs.privateEndpointsSubnetId.value]"
          },
          "privateDnsZoneIds": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'privateDns'), '2025-04-01').outputs.privateDnsZoneIds.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "14504401250391722836"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the storage account to deploy."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for the storage account."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags applied to the storage resources."
              }
            },
            "filesystemName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of the filesystem to create when hierarchical namespace is enabled."
              }
            },
            "containerNames": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of container names to create in the storage account."
              }
            },
            "runtimeContainerName": {
              "type": "string",
              "defaultValue": "runtime",
              "metadata": {
                "description": "Name of the runtime container for serverless compute (Functions, Logic Apps)."
              }
            },
            "queueNames": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of queue names to create in the storage account."
              }
            },
            "tableNames": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of table names to create in the storage account."
              }
            },
            "isHnsEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Indicates whether the storage account should enable hierarchical namespace (Data Lake Storage Gen2)."
              }
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "metadata": {
                "description": "Subnet for deploying private endpoints."
              }
            },
            "privateDnsZoneIds": {
              "type": "array",
              "metadata": {
                "description": "Private DNS zones to link to the created private endpoints."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "blobDnsZoneIds",
                "count": "[length(parameters('privateDnsZoneIds'))]",
                "input": "[if(endsWith(parameters('privateDnsZoneIds')[copyIndex('blobDnsZoneIds')], format('/privatelink.blob{0}', variables('blobEndpoint'))), parameters('privateDnsZoneIds')[copyIndex('blobDnsZoneIds')], null())]"
              },
              {
                "name": "dfsDnsZoneIds",
                "count": "[length(parameters('privateDnsZoneIds'))]",
                "input": "[if(endsWith(parameters('privateDnsZoneIds')[copyIndex('dfsDnsZoneIds')], format('/privatelink.dfs{0}', variables('blobEndpoint'))), parameters('privateDnsZoneIds')[copyIndex('dfsDnsZoneIds')], null())]"
              },
              {
                "name": "queueDnsZoneIds",
                "count": "[length(parameters('privateDnsZoneIds'))]",
                "input": "[if(endsWith(parameters('privateDnsZoneIds')[copyIndex('queueDnsZoneIds')], format('/privatelink.queue{0}', variables('blobEndpoint'))), parameters('privateDnsZoneIds')[copyIndex('queueDnsZoneIds')], null())]"
              },
              {
                "name": "tableDnsZoneIds",
                "count": "[length(parameters('privateDnsZoneIds'))]",
                "input": "[if(endsWith(parameters('privateDnsZoneIds')[copyIndex('tableDnsZoneIds')], format('/privatelink.table{0}', variables('blobEndpoint'))), parameters('privateDnsZoneIds')[copyIndex('tableDnsZoneIds')], null())]"
              }
            ],
            "blobEndpoint": "[environment().suffixes.storage]",
            "blobDnsZoneIdsFiltered": "[filter(variables('blobDnsZoneIds'), lambda('id', not(equals(lambdaVariables('id'), null()))))]",
            "dfsDnsZoneIdsFiltered": "[filter(variables('dfsDnsZoneIds'), lambda('id', not(equals(lambdaVariables('id'), null()))))]",
            "queueDnsZoneIdsFiltered": "[filter(variables('queueDnsZoneIds'), lambda('id', not(equals(lambdaVariables('id'), null()))))]",
            "tableDnsZoneIdsFiltered": "[filter(variables('tableDnsZoneIds'), lambda('id', not(equals(lambdaVariables('id'), null()))))]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2",
              "properties": {
                "defaultToOAuthAuthentication": true,
                "publicNetworkAccess": "Disabled",
                "minimumTlsVersion": "TLS1_2",
                "dnsEndpointType": "Standard",
                "supportsHttpsTrafficOnly": true
              }
            },
            {
              "condition": "[and(not(empty(parameters('filesystemName'))), parameters('isHnsEnabled'))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/default/{1}', parameters('name'), parameters('filesystemName'))]",
              "properties": {
                "publicAccess": "None"
              }
            },
            {
              "copy": {
                "name": "containers",
                "count": "[length(union(parameters('containerNames'), if(not(empty(parameters('runtimeContainerName'))), createArray(parameters('runtimeContainerName')), createArray())))]"
              },
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/default/{1}', parameters('name'), union(parameters('containerNames'), if(not(empty(parameters('runtimeContainerName'))), createArray(parameters('runtimeContainerName')), createArray()))[copyIndex()])]",
              "properties": {
                "publicAccess": "None"
              }
            },
            {
              "copy": {
                "name": "queues",
                "count": "[length(parameters('queueNames'))]"
              },
              "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/default/{1}', parameters('name'), parameters('queueNames')[copyIndex()])]"
            },
            {
              "copy": {
                "name": "tables",
                "count": "[length(parameters('tableNames'))]"
              },
              "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/default/{1}', parameters('name'), parameters('tableNames')[copyIndex()])]"
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-pe-blob', parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-blob', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]",
                      "groupIds": [
                        "blob"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('isHnsEnabled')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-pe-dfs', parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-dfs', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]",
                      "groupIds": [
                        "dfs"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('queueNames')))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-pe-queue', parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-queue', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]",
                      "groupIds": [
                        "queue"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('tableNames')))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-pe-table', parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-table', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]",
                      "groupIds": [
                        "table"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(variables('blobDnsZoneIdsFiltered')))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', format('{0}-pe-blob', parameters('name')), 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('blobDnsZoneIdsFiltered'))]",
                    "input": {
                      "name": "[last(split(variables('blobDnsZoneIdsFiltered')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                      "properties": {
                        "privateDnsZoneId": "[variables('blobDnsZoneIdsFiltered')[copyIndex('privateDnsZoneConfigs')]]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe-blob', parameters('name')))]"
              ]
            },
            {
              "condition": "[and(parameters('isHnsEnabled'), not(empty(variables('dfsDnsZoneIdsFiltered'))))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', format('{0}-pe-dfs', parameters('name')), 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('dfsDnsZoneIdsFiltered'))]",
                    "input": {
                      "name": "[last(split(variables('dfsDnsZoneIdsFiltered')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                      "properties": {
                        "privateDnsZoneId": "[variables('dfsDnsZoneIdsFiltered')[copyIndex('privateDnsZoneConfigs')]]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe-dfs', parameters('name')))]"
              ]
            },
            {
              "condition": "[and(not(empty(parameters('queueNames'))), not(empty(variables('queueDnsZoneIdsFiltered'))))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', format('{0}-pe-queue', parameters('name')), 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('queueDnsZoneIdsFiltered'))]",
                    "input": {
                      "name": "[last(split(variables('queueDnsZoneIdsFiltered')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                      "properties": {
                        "privateDnsZoneId": "[variables('queueDnsZoneIdsFiltered')[copyIndex('privateDnsZoneConfigs')]]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe-queue', parameters('name')))]"
              ]
            },
            {
              "condition": "[and(not(empty(parameters('tableNames'))), not(empty(variables('tableDnsZoneIdsFiltered'))))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', format('{0}-pe-table', parameters('name')), 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('tableDnsZoneIdsFiltered'))]",
                    "input": {
                      "name": "[last(split(variables('tableDnsZoneIdsFiltered')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                      "properties": {
                        "privateDnsZoneId": "[variables('tableDnsZoneIdsFiltered')[copyIndex('privateDnsZoneConfigs')]]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe-table', parameters('name')))]"
              ]
            }
          ],
          "outputs": {
            "storageAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
            },
            "storageAccountKey": {
              "type": "string",
              "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2022-09-01').keys[0].value]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'networking')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateDns')]",
        "[resourceId('Microsoft.Resources/deployments', 'naming')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "appHosting",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "functionPlanName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.functionPlan]"
          },
          "functionAppName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.functionApp]"
          },
          "functionPlanSku": {
            "value": "[parameters('functionPlanSku')]"
          },
          "functionSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networking'), '2025-04-01').outputs.functionSubnetId.value]"
          },
          "storageAccountId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2025-04-01').outputs.storageAccountId.value]"
          },
          "runtimeContainerName": {
            "value": "runtime"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logging'), '2025-04-01').outputs.workspaceId.value]"
          },
          "allowedIpRanges": {
            "value": "[parameters('allowedPublicIpRanges')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "28558143730058729"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for the hosting resources."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags applied to hosting resources."
              }
            },
            "functionPlanName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Elastic Premium plan for Functions."
              }
            },
            "functionAppName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Function App."
              }
            },
            "functionPlanSku": {
              "type": "string",
              "metadata": {
                "description": "SKU for the Functions Elastic Premium plan."
              }
            },
            "functionSubnetId": {
              "type": "string",
              "metadata": {
                "description": "Subnet ID used for VNet integration."
              }
            },
            "storageAccountId": {
              "type": "string",
              "metadata": {
                "description": "Storage account used for Function runtime state."
              }
            },
            "runtimeContainerName": {
              "type": "string",
              "defaultValue": "runtime",
              "metadata": {
                "description": "Name of the runtime container for Function App content."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace for diagnostics."
              }
            },
            "allowedIpRanges": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "IP ranges permitted to reach the Function App publicly."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "allowRules",
                "count": "[length(parameters('allowedIpRanges'))]",
                "input": {
                  "ipAddress": "[parameters('allowedIpRanges')[copyIndex('allowRules')]]",
                  "action": "Allow",
                  "priority": "[add(100, copyIndex('allowRules'))]",
                  "name": "[format('allow-{0}', replace(parameters('allowedIpRanges')[copyIndex('allowRules')], '/', '-'))]"
                }
              }
            ],
            "storageAccountName": "[last(split(parameters('storageAccountId'), '/'))]",
            "defaultDenyRule": {
              "ipAddress": "0.0.0.0/0",
              "action": "Deny",
              "priority": 2147483647,
              "name": "Deny all"
            },
            "ipRestrictions": "[if(empty(parameters('allowedIpRanges')), array(variables('defaultDenyRule')), variables('allowRules'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2022-03-01",
              "name": "[parameters('functionPlanName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('functionPlanSku')]",
                "tier": "ElasticPremium"
              },
              "properties": {
                "reserved": true,
                "maximumElasticWorkerCount": 20
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2022-03-01",
              "name": "[parameters('functionAppName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "functionapp,linux",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "httpsOnly": true,
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('functionPlanName'))]",
                "virtualNetworkSubnetId": "[parameters('functionSubnetId')]",
                "siteConfig": {
                  "linuxFxVersion": "DOTNET|6.0",
                  "appSettings": [
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~4"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "dotnet-isolated"
                    },
                    {
                      "name": "DOTNET_VERSION",
                      "value": "8.0"
                    },
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', variables('storageAccountName'), listKeys(parameters('storageAccountId'), '2022-09-01').keys[0].value, environment().suffixes.storage)]"
                    },
                    {
                      "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', variables('storageAccountName'), listKeys(parameters('storageAccountId'), '2022-09-01').keys[0].value, environment().suffixes.storage)]"
                    },
                    {
                      "name": "WEBSITE_CONTENTSHARE",
                      "value": "[parameters('runtimeContainerName')]"
                    },
                    {
                      "name": "WEBSITE_RUN_FROM_PACKAGE",
                      "value": "1"
                    },
                    {
                      "name": "WEBSITE_VNET_ROUTE_ALL",
                      "value": "1"
                    }
                  ],
                  "ipSecurityRestrictions": "[variables('ipRestrictions')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('functionPlanName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('functionAppName'))]",
              "name": "[format('{0}-logs', parameters('functionAppName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "FunctionAppLogs",
                    "enabled": true
                  },
                  {
                    "category": "AppServiceHTTPLogs",
                    "enabled": true
                  },
                  {
                    "category": "AppServicePlatformLogs",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
              ]
            }
          ],
          "outputs": {
            "functionAppName": {
              "type": "string",
              "value": "[parameters('functionAppName')]"
            },
            "functionAppResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
            },
            "functionAppIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2022-03-01', 'full').identity.principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'logging')]",
        "[resourceId('Microsoft.Resources/deployments', 'networking')]",
        "[resourceId('Microsoft.Resources/deployments', 'naming')]",
        "[resourceId('Microsoft.Resources/deployments', 'storage')]"
      ]
    },
    {
      "condition": "[parameters('deployLogicApps')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "logicApp",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.logicApp]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "sku": {
            "value": "[parameters('logicAppSku')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "onDemandSharedSecret": {
            "value": "[parameters('onDemandSharedSecret')]"
          },
          "integrationSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networking'), '2025-04-01').outputs.integrationSubnetId.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logging'), '2025-04-01').outputs.workspaceId.value]"
          },
          "storageAccountId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2025-04-01').outputs.storageAccountId.value]"
          },
          "runtimeContainerName": {
            "value": "runtime"
          },
          "synapseWorkspaceName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'synapse'), '2025-04-01').outputs.synapseWorkspaceName.value]"
          },
          "keyVaultName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.keyVault]"
          },
          "connName": {
            "value": "azurequeues"
          },
          "queueNames": {
            "value": [
              "events-synapse",
              "events-synapse-dlq"
            ]
          },
          "tableNames": {
            "value": [
              "ProcessedMessages",
              "RunHistory"
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "7130632134987140845"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Logic App Standard instance."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for deployment."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags applied to Logic App resources."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "Standard",
              "metadata": {
                "description": "Workflow Standard SKU tier (e.g., Standard)."
              }
            },
            "integrationSubnetId": {
              "type": "string",
              "metadata": {
                "description": "Subnet ID used for outbound VNet integration."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace for diagnostics."
              }
            },
            "storageAccountId": {
              "type": "string",
              "metadata": {
                "description": "Storage account backing the Logic App runtime."
              }
            },
            "runtimeContainerName": {
              "type": "string",
              "defaultValue": "runtime",
              "metadata": {
                "description": "Name of the runtime container for Logic App content."
              }
            },
            "synapseWorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Synapse workspace name"
              }
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Key Vault name (optional)"
              }
            },
            "environment": {
              "type": "string",
              "defaultValue": "dev",
              "metadata": {
                "description": "Environment name (dev, sit, prod)"
              }
            },
            "onDemandSharedSecret": {
              "type": "securestring",
              "metadata": {
                "description": "Shared secret for on-demand API authentication"
              }
            },
            "connName": {
              "type": "string",
              "defaultValue": "azurequeues",
              "metadata": {
                "description": "Connection name for Azure Storage Queues"
              }
            },
            "queueNames": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Queue names for eventing functionality"
              }
            },
            "tableNames": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Table names for eventing functionality"
              }
            }
          },
          "variables": {
            "storageAccountName": "[last(split(parameters('storageAccountId'), '/'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}-plan', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[if(contains(parameters('sku'), 'Premium'), 'WS3', 'WS1')]",
                "tier": "[parameters('sku')]"
              },
              "properties": {
                "reserved": true,
                "maximumElasticWorkerCount": 10
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2022-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "workflowapp,linux",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('{0}-plan', parameters('name')))]",
                "httpsOnly": true,
                "virtualNetworkSubnetId": "[parameters('integrationSubnetId')]",
                "siteConfig": {
                  "linuxFxVersion": "DOTNET|6.0",
                  "appSettings": [
                    {
                      "name": "APP_KIND",
                      "value": "workflowApp"
                    },
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', variables('storageAccountName'), listKeys(parameters('storageAccountId'), '2022-09-01').keys[0].value, environment().suffixes.storage)]"
                    },
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~4"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "dotnet"
                    },
                    {
                      "name": "WORKFLOWS_SUBSCRIPTION_ID",
                      "value": "[subscription().subscriptionId]"
                    },
                    {
                      "name": "WORKFLOWS_RESOURCE_GROUP_NAME",
                      "value": "[resourceGroup().name]"
                    },
                    {
                      "name": "WORKFLOWS_TENANT_ID",
                      "value": "[subscription().tenantId]"
                    },
                    {
                      "name": "SYNAPSE_WORKSPACE",
                      "value": "[parameters('synapseWorkspaceName')]"
                    },
                    {
                      "name": "KEYVAULT_NAME",
                      "value": "[parameters('keyVaultName')]"
                    },
                    {
                      "name": "WORKFLOWS_STORAGE_ACCOUNT_NAME",
                      "value": "[variables('storageAccountName')]"
                    },
                    {
                      "name": "WORKFLOWS_STORAGE_ACCOUNT_ACCESS_KEY",
                      "value": "[listKeys(parameters('storageAccountId'), '2022-09-01').keys[0].value]"
                    },
                    {
                      "name": "WEBSITE_CONTENTSHARE",
                      "value": "[parameters('runtimeContainerName')]"
                    },
                    {
                      "name": "WEBSITE_RUN_FROM_PACKAGE",
                      "value": "1"
                    },
                    {
                      "name": "EVENT_QUEUE_NAMES",
                      "value": "[join(parameters('queueNames'), ',')]"
                    },
                    {
                      "name": "EVENT_TABLE_NAMES",
                      "value": "[join(parameters('tableNames'), ',')]"
                    },
                    {
                      "name": "SCHEDULE_LOCK_BLOB_URL",
                      "value": "[format('https://{0}.blob.{1}/locks/schedule-leader-lock', variables('storageAccountName'), environment().suffixes.storage)]"
                    },
                    {
                      "name": "EVENT_QUEUE_NAME",
                      "value": "events-synapse"
                    },
                    {
                      "name": "PIPELINES_CONFIG_JSON",
                      "value": "[format('https://{0}.blob.{1}/config/pipelines.{2}.json', variables('storageAccountName'), environment().suffixes.storage, parameters('environment'))]"
                    },
                    {
                      "name": "DLQ_NAME",
                      "value": "events-synapse-dlq"
                    },
                    {
                      "name": "TABLE_DEDUPE",
                      "value": "ProcessedMessages"
                    },
                    {
                      "name": "TABLE_RUNS",
                      "value": "RunHistory"
                    },
                    {
                      "name": "AZURE_TABLE_ENDPOINT",
                      "value": "[format('https://{0}.table.{1}', variables('storageAccountName'), environment().suffixes.storage)]"
                    },
                    {
                      "name": "AZURE_BLOB_ENDPOINT",
                      "value": "[format('https://{0}.blob.{1}', variables('storageAccountName'), environment().suffixes.storage)]"
                    },
                    {
                      "name": "ENVIRONMENT",
                      "value": "[parameters('environment')]"
                    },
                    {
                      "name": "ONDEMAND_SHARED_SECRET",
                      "value": "[parameters('onDemandSharedSecret')]"
                    }
                  ],
                  "vnetRouteAllEnabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', format('{0}-plan', parameters('name')))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Synapse/workspaces/{0}', parameters('synapseWorkspaceName'))]",
              "name": "[guid(parameters('name'), 'SynapseContributor')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2022-03-01', 'full').identity.principalId]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(equals(parameters('keyVaultName'), ''))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(parameters('name'), 'KVSecretsUser')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2022-03-01', 'full').identity.principalId]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
              "name": "[format('{0}-logs', parameters('name'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "WorkflowRuntime",
                    "enabled": true
                  },
                  {
                    "category": "WorkflowMetrics",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[parameters('connName')]",
              "location": "[parameters('location')]",
              "properties": {
                "displayName": "Azure Storage Queues",
                "parameterValues": {
                  "connectionString": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', variables('storageAccountName'), listKeys(parameters('storageAccountId'), '2022-09-01').keys[0].value)]"
                },
                "api": {
                  "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azurequeues')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "azuretables",
              "location": "[parameters('location')]",
              "properties": {
                "displayName": "Azure Storage Tables",
                "parameterValues": {
                  "connectionString": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', variables('storageAccountName'), listKeys(parameters('storageAccountId'), '2022-09-01').keys[0].value)]"
                },
                "api": {
                  "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azuretables')]"
                }
              }
            }
          ],
          "outputs": {
            "logicAppName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "logicAppResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
            },
            "logicAppIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2022-03-01', 'full').identity.principalId]"
            },
            "storageQueuesConnectionId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/connections', parameters('connName'))]"
            },
            "storageTablesConnectionId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/connections', 'azuretables')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'logging')]",
        "[resourceId('Microsoft.Resources/deployments', 'networking')]",
        "[resourceId('Microsoft.Resources/deployments', 'naming')]",
        "[resourceId('Microsoft.Resources/deployments', 'storage')]",
        "[resourceId('Microsoft.Resources/deployments', 'synapse')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "eventing",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "eventGridTopicName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.eventGridTopic]"
          },
          "eventHubNamespaceName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.eventHubNamespace]"
          },
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2025-04-01').outputs.storageAccountId.value]"
          },
          "queueName": {
            "value": "events-synapse"
          },
          "dlqName": {
            "value": "events-synapse-dlq"
          },
          "tableDedupe": {
            "value": "ProcessedMessages"
          },
          "tableRuns": {
            "value": "RunHistory"
          },
          "eventHubSku": {
            "value": "Standard"
          },
          "eventHubThroughputUnits": {
            "value": 1
          },
          "messageRetentionDays": {
            "value": 7
          },
          "storageEventHubName": {
            "value": "[format('{0}-storage-events', reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.prefix)]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "privateEndpointSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networking'), '2025-04-01').outputs.privateEndpointsSubnetId.value]"
          },
          "privateDnsZoneIds": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'privateDns'), '2025-04-01').outputs.privateDnsZoneIds.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "14091960106472382294"
            }
          },
          "parameters": {
            "eventHubNamespaceName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Event Hub namespace"
              }
            },
            "storageEventHubName": {
              "type": "string",
              "defaultValue": "storage-monitoring",
              "metadata": {
                "description": "Name of the Event Hub for storage monitoring"
              }
            },
            "eventGridTopicName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Event Grid topic"
              }
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Storage account for queues/tables"
              }
            },
            "queueName": {
              "type": "string",
              "defaultValue": "events-synapse",
              "metadata": {
                "description": "Main event queue name"
              }
            },
            "dlqName": {
              "type": "string",
              "defaultValue": "events-synapse-dlq",
              "metadata": {
                "description": "Dead-letter queue name"
              }
            },
            "tableDedupe": {
              "type": "string",
              "defaultValue": "ProcessedMessages",
              "metadata": {
                "description": "Table to store processed message ids (idempotency)"
              }
            },
            "tableRuns": {
              "type": "string",
              "defaultValue": "RunHistory",
              "metadata": {
                "description": "Table to store run history / correlation"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for resources"
              }
            },
            "eventHubSku": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
              ],
              "metadata": {
                "description": "SKU for Event Hub Namespace"
              }
            },
            "eventHubThroughputUnits": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "maxValue": 20,
              "metadata": {
                "description": "Number of throughput units for Event Hub"
              }
            },
            "messageRetentionDays": {
              "type": "int",
              "defaultValue": 7,
              "minValue": 1,
              "maxValue": 7,
              "metadata": {
                "description": "Retention days for Event Hub messages"
              }
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "metadata": {
                "description": "Subnet used for private endpoint connections"
              }
            },
            "privateDnsZoneIds": {
              "type": "array",
              "metadata": {
                "description": "Private DNS zones available for private endpoint associations"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags for resources"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.EventHub/namespaces",
              "apiVersion": "2021-11-01",
              "name": "[parameters('eventHubNamespaceName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('eventHubSku')]",
                "tier": "[parameters('eventHubSku')]",
                "capacity": "[parameters('eventHubThroughputUnits')]"
              },
              "properties": {
                "isAutoInflateEnabled": true,
                "maximumThroughputUnits": 20,
                "zoneRedundant": "[equals(parameters('eventHubSku'), 'Premium')]",
                "disableLocalAuth": true
              }
            },
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/{1}', parameters('eventHubNamespaceName'), parameters('storageEventHubName'))]",
              "properties": {
                "messageRetentionInDays": "[parameters('messageRetentionDays')]",
                "partitionCount": 4
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
              ]
            },
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/{1}/{2}', parameters('eventHubNamespaceName'), parameters('storageEventHubName'), 'storage-monitoring')]",
              "properties": {},
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('storageEventHubName'))]"
              ]
            },
            {
              "type": "Microsoft.EventGrid/topics",
              "apiVersion": "2022-06-15",
              "name": "[parameters('eventGridTopicName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "inputSchema": "EventGridSchema",
                "publicNetworkAccess": "Disabled"
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-pe', parameters('eventHubNamespaceName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-connection', parameters('eventHubNamespaceName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]",
                      "groupIds": [
                        "namespace"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-pe', parameters('eventGridTopicName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-connection', parameters('eventGridTopicName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.EventGrid/topics', parameters('eventGridTopicName'))]",
                      "groupIds": [
                        "topic"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventGrid/topics', parameters('eventGridTopicName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}/{1}', format('{0}-pe', parameters('eventHubNamespaceName')), 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(parameters('privateDnsZoneIds'))]",
                    "input": {
                      "name": "[last(split(parameters('privateDnsZoneIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                      "properties": {
                        "privateDnsZoneId": "[parameters('privateDnsZoneIds')[copyIndex('privateDnsZoneConfigs')]]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('eventHubNamespaceName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}/{1}', format('{0}-pe', parameters('eventGridTopicName')), 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(parameters('privateDnsZoneIds'))]",
                    "input": {
                      "name": "[last(split(parameters('privateDnsZoneIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                      "properties": {
                        "privateDnsZoneId": "[parameters('privateDnsZoneIds')[copyIndex('privateDnsZoneConfigs')]]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('eventGridTopicName')))]"
              ]
            },
            {
              "type": "Microsoft.EventGrid/topics/eventSubscriptions",
              "apiVersion": "2022-06-15",
              "name": "[format('{0}/{1}', parameters('eventGridTopicName'), 'storage-events')]",
              "properties": {
                "destination": {
                  "endpointType": "EventHub",
                  "properties": {
                    "resourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('storageEventHubName'))]"
                  }
                },
                "filter": {
                  "includedEventTypes": [
                    "Microsoft.Storage.BlobCreated",
                    "Microsoft.Storage.BlobDeleted",
                    "Microsoft.Storage.BlobRenamed",
                    "Microsoft.Storage.DirectoryCreated",
                    "Microsoft.Storage.DirectoryDeleted",
                    "Microsoft.Storage.DirectoryRenamed"
                  ]
                },
                "eventDeliverySchema": "EventGridSchema",
                "retryPolicy": {
                  "maxDeliveryAttempts": 30,
                  "eventTimeToLiveInMinutes": 1440
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventGrid/topics', parameters('eventGridTopicName'))]",
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('storageEventHubName'))]"
              ]
            }
          ],
          "outputs": {
            "eventHubNamespaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
            },
            "eventHubId": {
              "type": "string",
              "value": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('storageEventHubName'))]"
            },
            "eventGridTopicId": {
              "type": "string",
              "value": "[resourceId('Microsoft.EventGrid/topics', parameters('eventGridTopicName'))]"
            },
            "eventGridTopicEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.EventGrid/topics', parameters('eventGridTopicName')), '2022-06-15').endpoint]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'networking')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateDns')]",
        "[resourceId('Microsoft.Resources/deployments', 'naming')]",
        "[resourceId('Microsoft.Resources/deployments', 'storage')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "synapse",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.synapse]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "defaultDataLakeStorageAccountResourceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2025-04-01').outputs.storageAccountId.value]"
          },
          "defaultDataLakeFilesystem": {
            "value": "[parameters('dataLakeFilesystem')]"
          },
          "managedResourceGroupName": {
            "value": "[format('{0}-{1}-synapse-rg', parameters('namePrefix'), parameters('environment'))]"
          },
          "sqlAdministratorLogin": {
            "value": "[parameters('synapseSqlAdminLogin')]"
          },
          "sqlAdministratorPassword": {
            "value": "[parameters('synapseSqlAdminPassword')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logging'), '2025-04-01').outputs.workspaceId.value]"
          },
          "managedPrivateEndpointSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networking'), '2025-04-01').outputs.privateEndpointsSubnetId.value]"
          },
          "privateDnsZoneIds": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'privateDns'), '2025-04-01').outputs.privateDnsZoneIds.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "17213815634835085381"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Synapse worvar synapseWorkspaceDnsZonesFiltered = [for zoneId in synapseWorkspaceDnsZones: zoneId != null ? zoneId : null]pace."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for Synapse deployment."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {
                "costOptimization": "enabled",
                "autoScaleDown": "true",
                "autoPause": "true"
              },
              "metadata": {
                "description": "Tags applied to Synapse resources."
              }
            },
            "defaultDataLakeStorageAccountResourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the default Data Lake Storage account."
              }
            },
            "shirName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of the Self-Hosted Integration Runtime"
              }
            },
            "createShir": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Create Self-Hosted Integration Runtime"
              }
            },
            "defaultDataLakeFilesystem": {
              "type": "string",
              "metadata": {
                "description": "Filesystem used as the primary linked service for the Synapse workspace."
              }
            },
            "managedResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "Name of the managed resource group created by Synapse."
              }
            },
            "sqlAdministratorLogin": {
              "type": "string",
              "metadata": {
                "description": "Dedicated SQL admin login name."
              }
            },
            "sqlAdministratorPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Dedicated SQL admin login password."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace for diagnostics."
              }
            },
            "managedPrivateEndpointSubnetId": {
              "type": "string",
              "metadata": {
                "description": "Subnet ID used for private endpoints associated with the workspace."
              }
            },
            "privateDnsZoneIds": {
              "type": "array",
              "metadata": {
                "description": "Private DNS zone IDs used for Synapse private endpoints."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "synapseWorkspaceDnsZones",
                "count": "[length(parameters('privateDnsZoneIds'))]",
                "input": "[if(endsWith(parameters('privateDnsZoneIds')[copyIndex('synapseWorkspaceDnsZones')], '/privatelink.azuresynapse.net'), parameters('privateDnsZoneIds')[copyIndex('synapseWorkspaceDnsZones')], null())]"
              },
              {
                "name": "synapseWorkspaceDnsZonesFiltered",
                "count": "[length(variables('synapseWorkspaceDnsZones'))]",
                "input": "[if(not(equals(variables('synapseWorkspaceDnsZones')[copyIndex('synapseWorkspaceDnsZonesFiltered')], null())), variables('synapseWorkspaceDnsZones')[copyIndex('synapseWorkspaceDnsZonesFiltered')], null())]"
              },
              {
                "name": "synapseSqlDnsZones",
                "count": "[length(parameters('privateDnsZoneIds'))]",
                "input": "[if(endsWith(parameters('privateDnsZoneIds')[copyIndex('synapseSqlDnsZones')], '/privatelink.sql.azuresynapse.net'), parameters('privateDnsZoneIds')[copyIndex('synapseSqlDnsZones')], null())]"
              },
              {
                "name": "synapseSqlDnsZonesFiltered",
                "count": "[length(variables('synapseSqlDnsZones'))]",
                "input": "[if(not(equals(variables('synapseSqlDnsZones')[copyIndex('synapseSqlDnsZonesFiltered')], null())), variables('synapseSqlDnsZones')[copyIndex('synapseSqlDnsZonesFiltered')], null())]"
              }
            ],
            "storageAccountName": "[last(split(parameters('defaultDataLakeStorageAccountResourceId'), '/'))]",
            "storageAccountUrl": "[format('https://{0}.dfs.{1}', variables('storageAccountName'), environment().suffixes.storage)]",
            "sparkPools": [
              {
                "name": "[format('{0}-spark-s', parameters('name'))]",
                "nodeSize": "Small",
                "minNodes": 3,
                "maxNodes": 12
              },
              {
                "name": "[format('{0}-spark-m', parameters('name'))]",
                "nodeSize": "Medium",
                "minNodes": 3,
                "maxNodes": 20
              },
              {
                "name": "[format('{0}-spark-l', parameters('name'))]",
                "nodeSize": "Large",
                "minNodes": 3,
                "maxNodes": 40
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Synapse/workspaces",
              "apiVersion": "2021-06-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "managedResourceGroupName": "[parameters('managedResourceGroupName')]",
                "defaultDataLakeStorage": {
                  "accountUrl": "[variables('storageAccountUrl')]",
                  "filesystem": "[parameters('defaultDataLakeFilesystem')]"
                },
                "sqlAdministratorLogin": "[parameters('sqlAdministratorLogin')]",
                "sqlAdministratorLoginPassword": "[parameters('sqlAdministratorPassword')]",
                "managedVirtualNetwork": "default",
                "managedVirtualNetworkSettings": {
                  "preventDataExfiltration": true,
                  "allowedAadTenantIdsForLinking": [
                    "[subscription().tenantId]"
                  ]
                },
                "publicNetworkAccess": "Disabled"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Synapse/workspaces/{0}', parameters('name'))]",
              "name": "[format('{0}-logs', parameters('name'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "BuiltinSqlReqsEnded",
                    "enabled": true
                  },
                  {
                    "category": "GatewayApiRequests",
                    "enabled": true
                  },
                  {
                    "category": "IntegrationActivityRuns",
                    "enabled": true
                  },
                  {
                    "category": "SynapseRbacOperations",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "sparkPoolsResources",
                "count": "[length(variables('sparkPools'))]"
              },
              "type": "Microsoft.Synapse/workspaces/bigDataPools",
              "apiVersion": "2021-06-01",
              "name": "[format('{0}/{1}', parameters('name'), variables('sparkPools')[copyIndex()].name)]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "nodeSize": "[variables('sparkPools')[copyIndex()].nodeSize]",
                "nodeSizeFamily": "MemoryOptimized",
                "autoScale": {
                  "enabled": true,
                  "minNodeCount": "[variables('sparkPools')[copyIndex()].minNodes]",
                  "maxNodeCount": "[variables('sparkPools')[copyIndex()].maxNodes]"
                },
                "autoPause": {
                  "enabled": true,
                  "delayInMinutes": 15
                },
                "sparkVersion": "3.3"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-pe-dev', parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('managedPrivateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-dev', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Synapse/workspaces', parameters('name'))]",
                      "groupIds": [
                        "dev"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-pe-sql', parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('managedPrivateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-sql', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Synapse/workspaces', parameters('name'))]",
                      "groupIds": [
                        "sql"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-pe-sqlondemand', parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('managedPrivateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-sqlondemand', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Synapse/workspaces', parameters('name'))]",
                      "groupIds": [
                        "sqlOnDemand"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(variables('synapseWorkspaceDnsZonesFiltered')))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', format('{0}-pe-dev', parameters('name')), 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('synapseWorkspaceDnsZonesFiltered'))]",
                    "input": {
                      "name": "[last(split(variables('synapseWorkspaceDnsZonesFiltered')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                      "properties": {
                        "privateDnsZoneId": "[variables('synapseWorkspaceDnsZonesFiltered')[copyIndex('privateDnsZoneConfigs')]]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe-dev', parameters('name')))]"
              ]
            },
            {
              "condition": "[not(empty(variables('synapseSqlDnsZonesFiltered')))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', format('{0}-pe-sql', parameters('name')), 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('synapseSqlDnsZonesFiltered'))]",
                    "input": {
                      "name": "[last(split(variables('synapseSqlDnsZonesFiltered')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                      "properties": {
                        "privateDnsZoneId": "[variables('synapseSqlDnsZonesFiltered')[copyIndex('privateDnsZoneConfigs')]]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe-sql', parameters('name')))]"
              ]
            },
            {
              "condition": "[not(empty(variables('synapseSqlDnsZonesFiltered')))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', format('{0}-pe-sqlondemand', parameters('name')), 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('synapseSqlDnsZonesFiltered'))]",
                    "input": {
                      "name": "[last(split(variables('synapseSqlDnsZonesFiltered')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                      "properties": {
                        "privateDnsZoneId": "[variables('synapseSqlDnsZonesFiltered')[copyIndex('privateDnsZoneConfigs')]]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe-sqlondemand', parameters('name')))]"
              ]
            },
            {
              "condition": "[parameters('createShir')]",
              "type": "Microsoft.Synapse/workspaces/integrationRuntimes",
              "apiVersion": "2021-06-01",
              "name": "[format('{0}/{1}', parameters('name'), parameters('shirName'))]",
              "properties": {
                "type": "SelfHosted",
                "description": "Self-hosted integration runtime for on-premises and cross-region data integration"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "synapseWorkspaceName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "synapseWorkspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Synapse/workspaces', parameters('name'))]"
            },
            "integrationRuntimeId": {
              "type": "string",
              "value": "[if(parameters('createShir'), resourceId('Microsoft.Synapse/workspaces/integrationRuntimes', parameters('name'), parameters('shirName')), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'logging')]",
        "[resourceId('Microsoft.Resources/deployments', 'networking')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateDns')]",
        "[resourceId('Microsoft.Resources/deployments', 'naming')]",
        "[resourceId('Microsoft.Resources/deployments', 'storage')]"
      ]
    },
    {
      "condition": "[parameters('deployAzureMaps')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "azureMaps",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.azureMaps]"
          },
          "location": {
            "value": "[variables('actualAzureMapsLocation')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logging'), '2025-04-01').outputs.workspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "120175538393553541"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Azure Maps account to deploy."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "global",
              "metadata": {
                "description": "Azure location for Azure Maps. Azure Maps is a global resource; use \"global\" unless otherwise required."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags applied to the Azure Maps account."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace for diagnostics collection."
              }
            },
            "disableLocalAuth": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Flag indicating whether shared keys/local authentication should be disabled in favour of Azure AD."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Maps/accounts",
              "apiVersion": "2023-06-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "Gen2",
              "sku": {
                "name": "G2"
              },
              "tags": "[parameters('tags')]",
              "properties": {
                "disableLocalAuth": "[parameters('disableLocalAuth')]"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Maps/accounts/{0}', parameters('name'))]",
              "name": "[format('{0}-logs', parameters('name'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Maps/accounts', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "mapsAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Maps/accounts', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'logging')]",
        "[resourceId('Microsoft.Resources/deployments', 'naming')]"
      ]
    },
    {
      "condition": "[parameters('deployCognitiveServices')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "cognitiveServices",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.cognitiveServices]"
          },
          "location": {
            "value": "[variables('actualCognitiveServicesLocation')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "privateEndpointSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networking'), '2025-04-01').outputs.privateEndpointsSubnetId.value]"
          },
          "privateDnsZoneIds": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'privateDns'), '2025-04-01').outputs.privateDnsZoneIds.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logging'), '2025-04-01').outputs.workspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "11756930050638165108"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Azure AI (Cognitive Services) account."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for the Cognitive Services account."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags applied to the Cognitive Services resources."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "S0",
              "metadata": {
                "description": "SKU name for the Cognitive Services account."
              }
            },
            "customSubdomainName": {
              "type": "string",
              "defaultValue": "[toLower(replace(parameters('name'), '-', ''))]",
              "metadata": {
                "description": "Custom subdomain used for the Cognitive Services endpoint. Must be globally unique."
              }
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "metadata": {
                "description": "Subnet into which the private endpoint should be deployed."
              }
            },
            "privateDnsZoneIds": {
              "type": "array",
              "metadata": {
                "description": "Private DNS zones available for private endpoint association."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace for diagnostics."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "cognitiveDnsZoneIds",
                "count": "[length(parameters('privateDnsZoneIds'))]",
                "input": "[if(endsWith(parameters('privateDnsZoneIds')[copyIndex('cognitiveDnsZoneIds')], '/privatelink.cognitiveservices.azure.com'), parameters('privateDnsZoneIds')[copyIndex('cognitiveDnsZoneIds')], null())]"
              },
              {
                "name": "cognitiveDnsZoneIdsFiltered",
                "count": "[length(variables('cognitiveDnsZoneIds'))]",
                "input": "[if(not(equals(variables('cognitiveDnsZoneIds')[copyIndex('cognitiveDnsZoneIdsFiltered')], null())), variables('cognitiveDnsZoneIds')[copyIndex('cognitiveDnsZoneIdsFiltered')], null())]"
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "CognitiveServices",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "tags": "[parameters('tags')]",
              "properties": {
                "customSubDomainName": "[parameters('customSubdomainName')]",
                "publicNetworkAccess": "Disabled",
                "disableLocalAuth": true,
                "encryption": {
                  "keySource": "Microsoft.CognitiveServices"
                },
                "networkAcls": {
                  "defaultAction": "Deny",
                  "virtualNetworkRules": [],
                  "ipRules": []
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-pe', parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-connection', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]",
                      "groupIds": [
                        "account"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(variables('cognitiveDnsZoneIdsFiltered')))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', format('{0}-pe', parameters('name')), 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('cognitiveDnsZoneIdsFiltered'))]",
                    "input": {
                      "name": "[last(split(variables('cognitiveDnsZoneIdsFiltered')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                      "properties": {
                        "privateDnsZoneId": "[variables('cognitiveDnsZoneIdsFiltered')[copyIndex('privateDnsZoneConfigs')]]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', parameters('name')))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
              "name": "[format('{0}-logs', parameters('name'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "Audit",
                    "enabled": true
                  },
                  {
                    "category": "RequestResponse",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "cognitiveAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
            },
            "cognitiveAccountEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').endpoint]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'logging')]",
        "[resourceId('Microsoft.Resources/deployments', 'networking')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateDns')]",
        "[resourceId('Microsoft.Resources/deployments', 'naming')]"
      ]
    },
    {
      "condition": "[parameters('deployPurview')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "purview",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.purview]"
          },
          "location": {
            "value": "[variables('actualPurviewLocation')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logging'), '2025-04-01').outputs.workspaceId.value]"
          },
          "privateEndpointSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networking'), '2025-04-01').outputs.privateEndpointsSubnetId.value]"
          },
          "privateDnsZoneIds": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'privateDns'), '2025-04-01').outputs.privateDnsZoneIds.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "10715289676424602909"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Microsoft Purview account."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for deployment."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags applied to all resources."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace for diagnostics."
              }
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "metadata": {
                "description": "Subnet ID for private endpoints."
              }
            },
            "privateDnsZoneIds": {
              "type": "array",
              "metadata": {
                "description": "Private DNS zone IDs for Purview endpoints."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Disabled",
              "metadata": {
                "description": "Enable public network access."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "purviewDnsZones",
                "count": "[length(parameters('privateDnsZoneIds'))]",
                "input": "[if(endsWith(parameters('privateDnsZoneIds')[copyIndex('purviewDnsZones')], '/privatelink.purview.azure.com'), parameters('privateDnsZoneIds')[copyIndex('purviewDnsZones')], null())]"
              },
              {
                "name": "purviewPortalDnsZones",
                "count": "[length(parameters('privateDnsZoneIds'))]",
                "input": "[if(endsWith(parameters('privateDnsZoneIds')[copyIndex('purviewPortalDnsZones')], '/privatelink.purviewstudio.azure.com'), parameters('privateDnsZoneIds')[copyIndex('purviewPortalDnsZones')], null())]"
              }
            ],
            "purviewDnsZonesFiltered": "[filter(variables('purviewDnsZones'), lambda('id', not(equals(lambdaVariables('id'), null()))))]",
            "purviewPortalDnsZonesFiltered": "[filter(variables('purviewPortalDnsZones'), lambda('id', not(equals(lambdaVariables('id'), null()))))]"
          },
          "resources": [
            {
              "type": "Microsoft.Purview/accounts",
              "apiVersion": "2021-12-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "managedResourceGroupName": "[format('{0}-managed-rg', parameters('name'))]",
                "cloudConnectors": {}
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-pe-account', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-account-connection', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Purview/accounts', parameters('name'))]",
                      "groupIds": [
                        "account"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Purview/accounts', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-pe-portal', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-portal-connection', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Purview/accounts', parameters('name'))]",
                      "groupIds": [
                        "portal"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Purview/accounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(variables('purviewDnsZonesFiltered')))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}/{1}', format('{0}-pe-account', parameters('name')), 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('purviewDnsZonesFiltered'))]",
                    "input": {
                      "name": "[last(split(variables('purviewDnsZonesFiltered')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                      "properties": {
                        "privateDnsZoneId": "[variables('purviewDnsZonesFiltered')[copyIndex('privateDnsZoneConfigs')]]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe-account', parameters('name')))]"
              ]
            },
            {
              "condition": "[not(empty(variables('purviewPortalDnsZonesFiltered')))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}/{1}', format('{0}-pe-portal', parameters('name')), 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('purviewPortalDnsZonesFiltered'))]",
                    "input": {
                      "name": "[last(split(variables('purviewPortalDnsZonesFiltered')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                      "properties": {
                        "privateDnsZoneId": "[variables('purviewPortalDnsZonesFiltered')[copyIndex('privateDnsZoneConfigs')]]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe-portal', parameters('name')))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Purview/accounts/{0}', parameters('name'))]",
              "name": "[format('{0}-logs', parameters('name'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "ScanStatusLogEvent",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  },
                  {
                    "category": "PurviewAccountAuditEvents",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 90
                    }
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Purview/accounts', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "purviewAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Purview/accounts', parameters('name'))]"
            },
            "purviewAccountName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "purviewAccountEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Purview/accounts', parameters('name')), '2021-12-01').endpoints.catalog]"
            },
            "purviewPortalEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Purview/accounts', parameters('name')), '2021-12-01').endpoints.guardian]"
            },
            "purviewIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Purview/accounts', parameters('name')), '2021-12-01', 'full').identity.principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'logging')]",
        "[resourceId('Microsoft.Resources/deployments', 'networking')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateDns')]",
        "[resourceId('Microsoft.Resources/deployments', 'naming')]"
      ]
    },
    {
      "condition": "[parameters('deployMachineLearning')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "machineLearning",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.machineLearning]"
          },
          "location": {
            "value": "[variables('actualMachineLearningLocation')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "storageAccountId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2025-04-01').outputs.storageAccountId.value]"
          },
          "keyVaultId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyVault'), '2025-04-01').outputs.keyVaultId.value]"
          },
          "applicationInsightsId": {
            "value": ""
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logging'), '2025-04-01').outputs.workspaceId.value]"
          },
          "privateEndpointSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networking'), '2025-04-01').outputs.privateEndpointsSubnetId.value]"
          },
          "privateDnsZoneIds": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'privateDns'), '2025-04-01').outputs.privateDnsZoneIds.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "5757773485356989699"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Azure Machine Learning workspace."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for deployment."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags applied to all resources."
              }
            },
            "storageAccountId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the storage account for ML workspace."
              }
            },
            "keyVaultId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the Key Vault."
              }
            },
            "applicationInsightsId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the Application Insights."
              }
            },
            "containerRegistryId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Resource ID of the container registry (optional)."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace for diagnostics."
              }
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "metadata": {
                "description": "Subnet ID for private endpoints."
              }
            },
            "privateDnsZoneIds": {
              "type": "array",
              "metadata": {
                "description": "Private DNS zone IDs for ML workspace endpoints."
              }
            },
            "hbiWorkspace": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable high business impact workspace."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "mlDnsZones",
                "count": "[length(parameters('privateDnsZoneIds'))]",
                "input": "[if(endsWith(parameters('privateDnsZoneIds')[copyIndex('mlDnsZones')], '/privatelink.api.azureml.ms'), parameters('privateDnsZoneIds')[copyIndex('mlDnsZones')], null())]"
              },
              {
                "name": "mlNotebooksDnsZones",
                "count": "[length(parameters('privateDnsZoneIds'))]",
                "input": "[if(endsWith(parameters('privateDnsZoneIds')[copyIndex('mlNotebooksDnsZones')], '/privatelink.notebooks.azure.net'), parameters('privateDnsZoneIds')[copyIndex('mlNotebooksDnsZones')], null())]"
              }
            ],
            "mlDnsZonesFiltered": "[filter(variables('mlDnsZones'), lambda('id', not(equals(lambdaVariables('id'), null()))))]",
            "mlNotebooksDnsZonesFiltered": "[filter(variables('mlNotebooksDnsZones'), lambda('id', not(equals(lambdaVariables('id'), null()))))]"
          },
          "resources": [
            {
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2023-10-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "friendlyName": "[parameters('name')]",
                "description": "[format('Azure ML workspace for {0}', parameters('name'))]",
                "storageAccount": "[parameters('storageAccountId')]",
                "keyVault": "[parameters('keyVaultId')]",
                "applicationInsights": "[parameters('applicationInsightsId')]",
                "containerRegistry": "[if(not(empty(parameters('containerRegistryId'))), parameters('containerRegistryId'), null())]",
                "publicNetworkAccess": "Disabled",
                "discoveryUrl": "[format('https://{0}.api.azureml.ms/discovery', parameters('location'))]",
                "encryption": {
                  "status": "Enabled",
                  "keyVaultProperties": {
                    "keyVaultArmId": "[parameters('keyVaultId')]",
                    "keyIdentifier": ""
                  }
                },
                "hbiWorkspace": "[parameters('hbiWorkspace')]",
                "v1LegacyMode": false,
                "managedNetwork": {
                  "isolationMode": "AllowInternetOutbound",
                  "outboundRules": {
                    "allow-azure-services": {
                      "type": "ServiceTag",
                      "destination": {
                        "serviceTag": "AzureActiveDirectory",
                        "protocol": "TCP",
                        "portRanges": "443"
                      }
                    }
                  }
                },
                "featureStoreSettings": {
                  "computeRuntime": {
                    "sparkRuntimeVersion": "3.3"
                  },
                  "offlineStoreConnectionName": "offline-store",
                  "onlineStoreConnectionName": "online-store"
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-pe-api', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-api-connection', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]",
                      "groupIds": [
                        "amlworkspace"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-pe-notebooks', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-notebooks-connection', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]",
                      "groupIds": [
                        "notebook"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(variables('mlDnsZonesFiltered')))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}/{1}', format('{0}-pe-api', parameters('name')), 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('mlDnsZonesFiltered'))]",
                    "input": {
                      "name": "[last(split(variables('mlDnsZonesFiltered')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                      "properties": {
                        "privateDnsZoneId": "[variables('mlDnsZonesFiltered')[copyIndex('privateDnsZoneConfigs')]]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe-api', parameters('name')))]"
              ]
            },
            {
              "condition": "[not(empty(variables('mlNotebooksDnsZonesFiltered')))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}/{1}', format('{0}-pe-notebooks', parameters('name')), 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('mlNotebooksDnsZonesFiltered'))]",
                    "input": {
                      "name": "[last(split(variables('mlNotebooksDnsZonesFiltered')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                      "properties": {
                        "privateDnsZoneId": "[variables('mlNotebooksDnsZonesFiltered')[copyIndex('privateDnsZoneConfigs')]]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe-notebooks', parameters('name')))]"
              ]
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces/computes",
              "apiVersion": "2023-10-01",
              "name": "[format('{0}/{1}', parameters('name'), format('{0}-dev-instance', parameters('name')))]",
              "location": "[parameters('location')]",
              "properties": {
                "computeType": "ComputeInstance",
                "properties": {
                  "vmSize": "Standard_DS3_v2",
                  "subnet": {
                    "id": "[parameters('privateEndpointSubnetId')]"
                  },
                  "applicationSharingPolicy": "Personal",
                  "sshSettings": {
                    "sshPublicAccess": "Disabled"
                  },
                  "setupScripts": {
                    "scripts": {
                      "creationScript": {
                        "scriptSource": "inline",
                        "scriptData": "[base64('#!/bin/bash\n# Install additional ML libraries\npip install --upgrade azureml-sdk\npip install mlflow\npip install optuna\npip install shap\npip install interpret\n            ')]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces/computes",
              "apiVersion": "2023-10-01",
              "name": "[format('{0}/{1}', parameters('name'), format('{0}-training-cluster', parameters('name')))]",
              "location": "[parameters('location')]",
              "properties": {
                "computeType": "AmlCompute",
                "properties": {
                  "vmSize": "Standard_DS3_v2",
                  "vmPriority": "Dedicated",
                  "scaleSettings": {
                    "minNodeCount": 0,
                    "maxNodeCount": 10,
                    "nodeIdleTimeBeforeScaleDown": "PT120S"
                  },
                  "subnet": {
                    "id": "[parameters('privateEndpointSubnetId')]"
                  },
                  "enableNodePublicIp": false,
                  "isolatedNetwork": false,
                  "osType": "Linux"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces/computes",
              "apiVersion": "2023-10-01",
              "name": "[format('{0}/{1}', parameters('name'), format('{0}-inference-cluster', parameters('name')))]",
              "location": "[parameters('location')]",
              "properties": {
                "computeType": "AKS",
                "properties": {
                  "agentCount": 3,
                  "agentVmSize": "Standard_D3_v2",
                  "clusterFqdn": "[format('{0}-inference.{1}.cloudapp.azure.com', parameters('name'), parameters('location'))]",
                  "orchestratorType": "Kubernetes",
                  "systemServices": [
                    {
                      "systemServiceType": "None"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('name'))]",
              "name": "[format('{0}-logs', parameters('name'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "AmlComputeClusterEvent",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  },
                  {
                    "category": "AmlComputeClusterNodeEvent",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  },
                  {
                    "category": "AmlComputeJobEvent",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 90
                    }
                  },
                  {
                    "category": "AmlComputeCpuGpuUtilization",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  },
                  {
                    "category": "AmlRunStatusChangedEvent",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 90
                    }
                  },
                  {
                    "category": "ModelsChangeEvent",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 90
                    }
                  },
                  {
                    "category": "ModelsReadEvent",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  },
                  {
                    "category": "ModelsActionEvent",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 90
                    }
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "mlWorkspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
            },
            "mlWorkspaceName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "mlWorkspaceIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), '2023-10-01', 'full').identity.principalId]"
            },
            "computeInstanceName": {
              "type": "string",
              "value": "[format('{0}-dev-instance', parameters('name'))]"
            },
            "trainingClusterName": {
              "type": "string",
              "value": "[format('{0}-training-cluster', parameters('name'))]"
            },
            "inferenceClusterName": {
              "type": "string",
              "value": "[format('{0}-inference-cluster', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'keyVault')]",
        "[resourceId('Microsoft.Resources/deployments', 'logging')]",
        "[resourceId('Microsoft.Resources/deployments', 'networking')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateDns')]",
        "[resourceId('Microsoft.Resources/deployments', 'naming')]",
        "[resourceId('Microsoft.Resources/deployments', 'storage')]"
      ]
    },
    {
      "condition": "[parameters('deployAKS')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "kubernetes",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.kubernetes]"
          },
          "location": {
            "value": "[variables('actualAksLocation')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networking'), '2025-04-01').outputs.functionSubnetId.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logging'), '2025-04-01').outputs.workspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "17443407856965045418"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the AKS cluster."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for deployment."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags applied to all resources."
              }
            },
            "kubernetesVersion": {
              "type": "string",
              "defaultValue": "1.28.3",
              "metadata": {
                "description": "Kubernetes version."
              }
            },
            "nodeVmSize": {
              "type": "string",
              "defaultValue": "Standard_D4s_v3",
              "metadata": {
                "description": "VM size for the default node pool."
              }
            },
            "nodeCount": {
              "type": "int",
              "defaultValue": 3,
              "metadata": {
                "description": "Number of nodes in the default pool."
              }
            },
            "minNodeCount": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Minimum number of nodes for auto-scaling."
              }
            },
            "maxNodeCount": {
              "type": "int",
              "defaultValue": 10,
              "metadata": {
                "description": "Maximum number of nodes for auto-scaling."
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "Subnet ID for AKS nodes."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace for diagnostics."
              }
            },
            "enableAzureAD": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable Azure AD integration."
              }
            },
            "enableAzureRBAC": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable Azure RBAC for Kubernetes authorization."
              }
            },
            "networkPlugin": {
              "type": "string",
              "defaultValue": "azure",
              "allowedValues": [
                "azure",
                "kubenet"
              ],
              "metadata": {
                "description": "Network plugin (azure or kubenet)."
              }
            },
            "networkPolicy": {
              "type": "string",
              "defaultValue": "azure",
              "allowedValues": [
                "azure",
                "calico"
              ],
              "metadata": {
                "description": "Network policy (azure or calico)."
              }
            },
            "dnsServiceIP": {
              "type": "string",
              "defaultValue": "10.0.0.10",
              "metadata": {
                "description": "DNS service IP."
              }
            },
            "serviceCidr": {
              "type": "string",
              "defaultValue": "10.0.0.0/16",
              "metadata": {
                "description": "Service CIDR."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerService/managedClusters",
              "apiVersion": "2023-10-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "dnsPrefix": "[format('{0}-dns', parameters('name'))]",
                "enableRBAC": true,
                "agentPoolProfiles": [
                  {
                    "name": "system",
                    "count": "[parameters('nodeCount')]",
                    "vmSize": "[parameters('nodeVmSize')]",
                    "osType": "Linux",
                    "mode": "System",
                    "enableAutoScaling": true,
                    "minCount": "[parameters('minNodeCount')]",
                    "maxCount": "[parameters('maxNodeCount')]",
                    "vnetSubnetID": "[parameters('subnetId')]",
                    "maxPods": 30,
                    "osDiskSizeGB": 128,
                    "osDiskType": "Managed",
                    "kubeletDiskType": "OS",
                    "nodeTaints": [
                      "CriticalAddonsOnly=true:NoSchedule"
                    ],
                    "nodeLabels": {
                      "node-type": "system"
                    }
                  }
                ],
                "networkProfile": {
                  "networkPlugin": "[parameters('networkPlugin')]",
                  "networkPolicy": "[parameters('networkPolicy')]",
                  "serviceCidr": "[parameters('serviceCidr')]",
                  "dnsServiceIP": "[parameters('dnsServiceIP')]",
                  "loadBalancerSku": "Standard",
                  "outboundType": "loadBalancer"
                },
                "aadProfile": "[if(parameters('enableAzureAD'), createObject('managed', true(), 'enableAzureRBAC', parameters('enableAzureRBAC'), 'tenantID', tenant().tenantId), null())]",
                "apiServerAccessProfile": {
                  "enablePrivateCluster": true,
                  "privateDNSZone": "system",
                  "enablePrivateClusterPublicFQDN": false
                },
                "addonProfiles": {
                  "omsagent": {
                    "enabled": true,
                    "config": {
                      "logAnalyticsWorkspaceResourceID": "[parameters('logAnalyticsWorkspaceId')]"
                    }
                  },
                  "azureKeyvaultSecretsProvider": {
                    "enabled": true,
                    "config": {
                      "enableSecretRotation": "true",
                      "rotationPollInterval": "2m"
                    }
                  },
                  "azurepolicy": {
                    "enabled": true
                  },
                  "ingressApplicationGateway": {
                    "enabled": false
                  }
                },
                "securityProfile": {
                  "workloadIdentity": {
                    "enabled": true
                  },
                  "imageCleaner": {
                    "enabled": true,
                    "intervalHours": 48
                  }
                },
                "autoUpgradeProfile": {
                  "upgradeChannel": "patch"
                },
                "storageProfile": {
                  "diskCSIDriver": {
                    "enabled": true
                  },
                  "fileCSIDriver": {
                    "enabled": true
                  },
                  "snapshotController": {
                    "enabled": true
                  }
                },
                "windowsProfile": null,
                "httpProxyConfig": null,
                "maintenanceWindow": {
                  "allowedDays": [
                    "Saturday",
                    "Sunday"
                  ],
                  "allowedHours": [
                    2,
                    3,
                    4
                  ]
                }
              }
            },
            {
              "type": "Microsoft.ContainerService/managedClusters/agentPools",
              "apiVersion": "2023-10-01",
              "name": "[format('{0}/{1}', parameters('name'), 'user')]",
              "properties": {
                "count": 2,
                "vmSize": "Standard_D2s_v3",
                "osType": "Linux",
                "mode": "User",
                "enableAutoScaling": true,
                "minCount": 0,
                "maxCount": 5,
                "vnetSubnetID": "[parameters('subnetId')]",
                "maxPods": 30,
                "osDiskSizeGB": 128,
                "osDiskType": "Managed",
                "kubeletDiskType": "OS",
                "nodeLabels": {
                  "node-type": "user",
                  "workload": "general"
                },
                "nodeTaints": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.ContainerService/managedClusters/agentPools",
              "apiVersion": "2023-10-01",
              "name": "[format('{0}/{1}', parameters('name'), 'gpu')]",
              "properties": {
                "count": 0,
                "vmSize": "Standard_NC6s_v3",
                "osType": "Linux",
                "mode": "User",
                "enableAutoScaling": true,
                "minCount": 0,
                "maxCount": 3,
                "vnetSubnetID": "[parameters('subnetId')]",
                "maxPods": 30,
                "osDiskSizeGB": 256,
                "osDiskType": "Managed",
                "kubeletDiskType": "OS",
                "nodeLabels": {
                  "node-type": "gpu",
                  "workload": "ml",
                  "accelerator": "nvidia-tesla-v100"
                },
                "nodeTaints": [
                  "sku=gpu:NoSchedule"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', parameters('name'))]",
              "name": "[format('{0}-logs', parameters('name'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "kube-apiserver",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  },
                  {
                    "category": "kube-audit",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 90
                    }
                  },
                  {
                    "category": "kube-controller-manager",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  },
                  {
                    "category": "kube-scheduler",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  },
                  {
                    "category": "cluster-autoscaler",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  },
                  {
                    "category": "guard",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "aksClusterId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))]"
            },
            "aksClusterName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "aksClusterFqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('name')), '2023-10-01').fqdn]"
            },
            "aksClusterIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('name')), '2023-10-01', 'full').identity.principalId]"
            },
            "nodeResourceGroup": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('name')), '2023-10-01').nodeResourceGroup]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'logging')]",
        "[resourceId('Microsoft.Resources/deployments', 'networking')]",
        "[resourceId('Microsoft.Resources/deployments', 'naming')]"
      ]
    },
    {
      "condition": "[parameters('deployFabric')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "fabric",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.fabric]"
          },
          "location": {
            "value": "[variables('actualFabricLocation')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "administrators": {
            "value": [
              "admin@company.com"
            ]
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logging'), '2025-04-01').outputs.workspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "6211687663880796943"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Microsoft Fabric capacity."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for deployment."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags applied to all resources."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "F2",
              "allowedValues": [
                "F2",
                "F4",
                "F8",
                "F16",
                "F32",
                "F64",
                "F128",
                "F256",
                "F512"
              ],
              "metadata": {
                "description": "SKU for Microsoft Fabric capacity."
              }
            },
            "administrators": {
              "type": "array",
              "metadata": {
                "description": "Administrator email addresses."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace for diagnostics."
              }
            },
            "enableAutoScale": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable automatic scaling."
              }
            },
            "maxCapacityUnits": {
              "type": "int",
              "defaultValue": 4,
              "metadata": {
                "description": "Maximum capacity units for auto-scaling."
              }
            },
            "minCapacityUnits": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Minimum capacity units for auto-scaling."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Fabric/capacities",
              "apiVersion": "2023-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('sku')]",
                "tier": "Fabric"
              },
              "properties": {
                "administration": {
                  "members": "[parameters('administrators')]"
                },
                "state": "Active"
              }
            },
            {
              "condition": "[parameters('enableAutoScale')]",
              "type": "Microsoft.Insights/autoscalesettings",
              "apiVersion": "2022-10-01",
              "name": "[format('{0}-autoscale', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "enabled": "[parameters('enableAutoScale')]",
                "targetResourceUri": "[resourceId('Microsoft.Fabric/capacities', parameters('name'))]",
                "profiles": [
                  {
                    "name": "Default",
                    "capacity": {
                      "minimum": "[string(parameters('minCapacityUnits'))]",
                      "maximum": "[string(parameters('maxCapacityUnits'))]",
                      "default": "[string(parameters('minCapacityUnits'))]"
                    },
                    "rules": [
                      {
                        "metricTrigger": {
                          "metricName": "CU",
                          "metricNamespace": "Microsoft.Fabric/capacities",
                          "metricResourceUri": "[resourceId('Microsoft.Fabric/capacities', parameters('name'))]",
                          "timeGrain": "PT1M",
                          "statistic": "Average",
                          "timeWindow": "PT5M",
                          "timeAggregation": "Average",
                          "operator": "GreaterThan",
                          "threshold": 80
                        },
                        "scaleAction": {
                          "direction": "Increase",
                          "type": "ChangeCount",
                          "value": "1",
                          "cooldown": "PT10M"
                        }
                      },
                      {
                        "metricTrigger": {
                          "metricName": "CU",
                          "metricNamespace": "Microsoft.Fabric/capacities",
                          "metricResourceUri": "[resourceId('Microsoft.Fabric/capacities', parameters('name'))]",
                          "timeGrain": "PT1M",
                          "statistic": "Average",
                          "timeWindow": "PT15M",
                          "timeAggregation": "Average",
                          "operator": "LessThan",
                          "threshold": 30
                        },
                        "scaleAction": {
                          "direction": "Decrease",
                          "type": "ChangeCount",
                          "value": "1",
                          "cooldown": "PT20M"
                        }
                      }
                    ]
                  },
                  {
                    "name": "BusinessHours",
                    "capacity": {
                      "minimum": "[string(add(parameters('minCapacityUnits'), 1))]",
                      "maximum": "[string(parameters('maxCapacityUnits'))]",
                      "default": "[string(add(parameters('minCapacityUnits'), 1))]"
                    },
                    "rules": [
                      {
                        "metricTrigger": {
                          "metricName": "CU",
                          "metricNamespace": "Microsoft.Fabric/capacities",
                          "metricResourceUri": "[resourceId('Microsoft.Fabric/capacities', parameters('name'))]",
                          "timeGrain": "PT1M",
                          "statistic": "Average",
                          "timeWindow": "PT5M",
                          "timeAggregation": "Average",
                          "operator": "GreaterThan",
                          "threshold": 70
                        },
                        "scaleAction": {
                          "direction": "Increase",
                          "type": "ChangeCount",
                          "value": "1",
                          "cooldown": "PT5M"
                        }
                      }
                    ],
                    "recurrence": {
                      "frequency": "Week",
                      "schedule": {
                        "timeZone": "UTC",
                        "days": [
                          "Monday",
                          "Tuesday",
                          "Wednesday",
                          "Thursday",
                          "Friday"
                        ],
                        "hours": [
                          8
                        ],
                        "minutes": [
                          0
                        ]
                      }
                    }
                  }
                ],
                "notifications": [
                  {
                    "operation": "Scale",
                    "email": {
                      "sendToSubscriptionAdministrator": true,
                      "sendToSubscriptionCoAdministrators": true,
                      "customEmails": "[parameters('administrators')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Fabric/capacities', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Fabric/capacities/{0}', parameters('name'))]",
              "name": "[format('{0}-logs', parameters('name'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "Engine",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  },
                  {
                    "category": "Service",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  },
                  {
                    "category": "Gateway",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Fabric/capacities', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/activityLogAlerts",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-activity-alert', parameters('name'))]",
              "location": "Global",
              "tags": "[parameters('tags')]",
              "properties": {
                "enabled": true,
                "scopes": [
                  "[resourceId('Microsoft.Fabric/capacities', parameters('name'))]"
                ],
                "condition": {
                  "allOf": [
                    {
                      "field": "category",
                      "equals": "Administrative"
                    },
                    {
                      "field": "operationName",
                      "equals": "Microsoft.Fabric/capacities/write"
                    },
                    {
                      "field": "status",
                      "equals": "Failed"
                    }
                  ]
                },
                "actions": {
                  "actionGroups": []
                },
                "description": "Alert for Microsoft Fabric capacity operations"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Fabric/capacities', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "[format('{0}-capacity-alert', parameters('name'))]",
              "location": "Global",
              "tags": "[parameters('tags')]",
              "properties": {
                "description": "Alert when Fabric capacity utilization is high",
                "severity": 2,
                "enabled": true,
                "scopes": [
                  "[resourceId('Microsoft.Fabric/capacities', parameters('name'))]"
                ],
                "evaluationFrequency": "PT1M",
                "windowSize": "PT5M",
                "criteria": {
                  "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                  "allOf": [
                    {
                      "threshold": 90,
                      "name": "HighCapacityUtilization",
                      "metricNamespace": "Microsoft.Fabric/capacities",
                      "metricName": "CU",
                      "operator": "GreaterThan",
                      "timeAggregation": "Average",
                      "criterionType": "StaticThresholdCriterion"
                    }
                  ]
                },
                "actions": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.Fabric/capacities', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "fabricCapacityId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Fabric/capacities', parameters('name'))]"
            },
            "fabricCapacityName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "fabricCapacityLocation": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Fabric/capacities', parameters('name')), '2023-11-01', 'full').location]"
            },
            "fabricCapacityState": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Fabric/capacities', parameters('name')), '2023-11-01').state]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'logging')]",
        "[resourceId('Microsoft.Resources/deployments', 'naming')]"
      ]
    },
    {
      "condition": "[parameters('deployContainerInstances')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "containerInstances",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.containerInstances]"
          },
          "location": {
            "value": "[variables('actualContainerInstancesLocation')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networking'), '2025-04-01').outputs.integrationSubnetId.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logging'), '2025-04-01').outputs.workspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "3077080601080656025"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Container Instances group."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for deployment."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags applied to all resources."
              }
            },
            "containerImage": {
              "type": "string",
              "defaultValue": "mcr.microsoft.com/azure-functions/dotnet-isolated:4-dotnet-isolated8.0",
              "metadata": {
                "description": "Container image to deploy."
              }
            },
            "cpuCores": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Number of CPU cores."
              }
            },
            "memoryInGB": {
              "type": "int",
              "defaultValue": 2,
              "metadata": {
                "description": "Memory in GB."
              }
            },
            "restartPolicy": {
              "type": "string",
              "defaultValue": "OnFailure",
              "allowedValues": [
                "Always",
                "Never",
                "OnFailure"
              ],
              "metadata": {
                "description": "Restart policy for containers."
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "Subnet ID for VNet integration."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace for diagnostics."
              }
            },
            "environmentVariables": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Environment variables for the container."
              }
            },
            "enableManagedIdentity": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable managed identity."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerInstance/containerGroups",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[if(parameters('enableManagedIdentity'), createObject('type', 'SystemAssigned'), null())]",
              "properties": {
                "containers": [
                  {
                    "name": "[format('{0}-container', parameters('name'))]",
                    "properties": {
                      "image": "[parameters('containerImage')]",
                      "resources": {
                        "requests": {
                          "cpu": "[parameters('cpuCores')]",
                          "memoryInGB": "[parameters('memoryInGB')]"
                        }
                      },
                      "environmentVariables": "[parameters('environmentVariables')]",
                      "ports": [
                        {
                          "port": 80,
                          "protocol": "TCP"
                        },
                        {
                          "port": 443,
                          "protocol": "TCP"
                        }
                      ]
                    }
                  }
                ],
                "restartPolicy": "[parameters('restartPolicy')]",
                "osType": "Linux",
                "subnetIds": [
                  {
                    "id": "[parameters('subnetId')]"
                  }
                ],
                "diagnostics": {
                  "logAnalytics": {
                    "workspaceId": "[reference(parameters('logAnalyticsWorkspaceId'), '2022-10-01').customerId]",
                    "workspaceKey": "[listKeys(parameters('logAnalyticsWorkspaceId'), '2022-10-01').primarySharedKey]"
                  }
                },
                "priority": "Regular",
                "sku": "Standard"
              }
            },
            {
              "type": "Microsoft.ContainerInstance/containerGroups",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}-sidecar', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[union(parameters('tags'), createObject('purpose', 'sidecar'))]",
              "identity": "[if(parameters('enableManagedIdentity'), createObject('type', 'SystemAssigned'), null())]",
              "properties": {
                "containers": [
                  {
                    "name": "app-container",
                    "properties": {
                      "image": "[parameters('containerImage')]",
                      "resources": {
                        "requests": {
                          "cpu": "[parameters('cpuCores')]",
                          "memoryInGB": "[parameters('memoryInGB')]"
                        }
                      },
                      "environmentVariables": "[parameters('environmentVariables')]",
                      "ports": [
                        {
                          "port": 8080,
                          "protocol": "TCP"
                        }
                      ]
                    }
                  },
                  {
                    "name": "logging-sidecar",
                    "properties": {
                      "image": "mcr.microsoft.com/azuremonitor/containerinsights/ciprod:ciprod20230816",
                      "resources": {
                        "requests": {
                          "cpu": "[json('0.5')]",
                          "memoryInGB": 1
                        }
                      },
                      "environmentVariables": [
                        {
                          "name": "WORKSPACE_ID",
                          "value": "[reference(parameters('logAnalyticsWorkspaceId'), '2022-10-01').customerId]"
                        },
                        {
                          "name": "WORKSPACE_KEY",
                          "secureValue": "[listKeys(parameters('logAnalyticsWorkspaceId'), '2022-10-01').primarySharedKey]"
                        }
                      ]
                    }
                  }
                ],
                "restartPolicy": "Always",
                "osType": "Linux",
                "subnetIds": [
                  {
                    "id": "[parameters('subnetId')]"
                  }
                ],
                "priority": "Regular",
                "sku": "Standard"
              }
            },
            {
              "type": "Microsoft.ContainerInstance/containerGroups",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}-batch', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[union(parameters('tags'), createObject('purpose', 'batch-processing'))]",
              "identity": "[if(parameters('enableManagedIdentity'), createObject('type', 'SystemAssigned'), null())]",
              "properties": {
                "containers": [
                  {
                    "name": "batch-processor",
                    "properties": {
                      "image": "mcr.microsoft.com/dotnet/runtime:8.0",
                      "resources": {
                        "requests": {
                          "cpu": 2,
                          "memoryInGB": 4
                        }
                      },
                      "environmentVariables": [
                        {
                          "name": "BATCH_SIZE",
                          "value": "1000"
                        },
                        {
                          "name": "WORKER_THREADS",
                          "value": "4"
                        }
                      ],
                      "command": [
                        "/bin/bash",
                        "-c",
                        "echo \"Starting batch processing...\" && sleep 3600"
                      ]
                    }
                  }
                ],
                "restartPolicy": "OnFailure",
                "osType": "Linux",
                "subnetIds": [
                  {
                    "id": "[parameters('subnetId')]"
                  }
                ],
                "priority": "Spot",
                "sku": "Standard"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.ContainerInstance/containerGroups/{0}', parameters('name'))]",
              "name": "[format('{0}-logs', parameters('name'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "ContainerInstanceLog",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerInstance/containerGroups', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "containerGroupId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerInstance/containerGroups', parameters('name'))]"
            },
            "containerGroupName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "containerGroupFqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerInstance/containerGroups', parameters('name')), '2023-05-01').ipAddress.fqdn]"
            },
            "containerGroupIpAddress": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerInstance/containerGroups', parameters('name')), '2023-05-01').ipAddress.ip]"
            },
            "containerGroupIdentityPrincipalId": {
              "type": "string",
              "value": "[if(parameters('enableManagedIdentity'), reference(resourceId('Microsoft.ContainerInstance/containerGroups', parameters('name')), '2023-05-01', 'full').identity.principalId, '')]"
            },
            "sidecarContainerGroupId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerInstance/containerGroups', format('{0}-sidecar', parameters('name')))]"
            },
            "batchContainerGroupId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerInstance/containerGroups', format('{0}-batch', parameters('name')))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'logging')]",
        "[resourceId('Microsoft.Resources/deployments', 'networking')]",
        "[resourceId('Microsoft.Resources/deployments', 'naming')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "comprehensiveApiGateway",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'naming'), '2025-04-01').outputs.naming.value.comprehensiveApiGateway]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "publisherEmail": {
            "value": "admin@company.com"
          },
          "publisherName": {
            "value": "Data Platform Team"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networking'), '2025-04-01').outputs.integrationSubnetId.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logging'), '2025-04-01').outputs.workspaceId.value]"
          },
          "applicationInsightsId": {
            "value": ""
          },
          "deployApplicationInsights": {
            "value": false
          },
          "keyVaultId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyVault'), '2025-04-01').outputs.keyVaultId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "5480956535221869232"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the comprehensive API gateway."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for deployment."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags applied to all resources."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "Developer",
              "allowedValues": [
                "Developer",
                "Standard",
                "Premium"
              ],
              "metadata": {
                "description": "SKU for API Management."
              }
            },
            "publisherEmail": {
              "type": "string",
              "metadata": {
                "description": "Publisher email for API Management."
              }
            },
            "publisherName": {
              "type": "string",
              "metadata": {
                "description": "Publisher name for API Management."
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "Subnet ID for API Management."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace for diagnostics."
              }
            },
            "applicationInsightsId": {
              "type": "string",
              "metadata": {
                "description": "Application Insights for API monitoring."
              }
            },
            "deployApplicationInsights": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Whether Application Insights is deployed and available."
              }
            },
            "keyVaultId": {
              "type": "string",
              "metadata": {
                "description": "Key Vault for secrets management."
              }
            },
            "backendServices": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Backend services configuration."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ApiManagement/service",
              "apiVersion": "2023-05-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('sku')]",
                "capacity": 1
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "publisherEmail": "[parameters('publisherEmail')]",
                "publisherName": "[parameters('publisherName')]",
                "virtualNetworkType": "Internal",
                "virtualNetworkConfiguration": {
                  "subnetResourceId": "[parameters('subnetId')]"
                },
                "publicNetworkAccess": "Disabled",
                "developerPortalStatus": "Enabled",
                "gatewayUrl": "[format('https://{0}.azure-api.net', parameters('name'))]",
                "customProperties": {
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2": "True"
                },
                "apiVersionConstraint": {
                  "minApiVersion": "2021-08-01"
                }
              }
            },
            {
              "condition": "[parameters('deployApplicationInsights')]",
              "type": "Microsoft.ApiManagement/service/loggers",
              "apiVersion": "2023-05-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), 'appinsights-logger')]",
              "properties": {
                "loggerType": "applicationInsights",
                "description": "Application Insights logger for API Management",
                "credentials": {
                  "instrumentationKey": "[reference(parameters('applicationInsightsId'), '2020-02-02').InstrumentationKey]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/policies",
              "apiVersion": "2023-05-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), 'policy')]",
              "properties": {
                "value": "    <policies>\n      <inbound>\n        <cors allow-credentials=\"true\">\n          <allowed-origins>\n            <origin>*</origin>\n          </allowed-origins>\n          <allowed-methods>\n            <method>GET</method>\n            <method>POST</method>\n            <method>PUT</method>\n            <method>DELETE</method>\n            <method>OPTIONS</method>\n          </allowed-methods>\n          <allowed-headers>\n            <header>*</header>\n          </allowed-headers>\n        </cors>\n        <rate-limit-by-key calls=\"1000\" renewal-period=\"3600\" counter-key=\"@(context.Request.IpAddress)\" />\n        <quota-by-key calls=\"10000\" renewal-period=\"86400\" counter-key=\"@(context.Request.IpAddress)\" />\n        <authentication-managed-identity resource=\"https://graph.microsoft.com\" />\n        <set-header name=\"X-Powered-By\" exists-action=\"delete\" />\n        <set-header name=\"X-AspNet-Version\" exists-action=\"delete\" />\n      </inbound>\n      <backend>\n        <forward-request />\n      </backend>\n      <outbound>\n        <set-header name=\"X-Request-Id\" exists-action=\"override\">\n          <value>@(context.RequestId)</value>\n        </set-header>\n      </outbound>\n      <on-error>\n        <set-status code=\"500\" reason=\"Internal Server Error\" />\n        <set-body>@{\n          return new JObject(\n            new JProperty(\"error\", new JObject(\n              new JProperty(\"code\", context.LastError.Source),\n              new JProperty(\"message\", context.LastError.Message),\n              new JProperty(\"requestId\", context.RequestId)\n            ))\n          ).ToString();\n        }</set-body>\n      </on-error>\n    </policies>\n    "
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis",
              "apiVersion": "2023-05-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), 'graphql-api')]",
              "properties": {
                "displayName": "GraphQL API",
                "description": "Modern GraphQL API for data platform",
                "path": "graphql",
                "protocols": [
                  "https"
                ],
                "type": "graphql",
                "format": "graphql-link",
                "value": "https://api.example.com/graphql",
                "subscriptionRequired": true,
                "authenticationSettings": {
                  "oAuth2AuthenticationSettings": [],
                  "openidAuthenticationSettings": []
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis",
              "apiVersion": "2023-05-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), 'data-platform-api')]",
              "properties": {
                "displayName": "Data Platform REST API",
                "description": "RESTful API for data platform operations",
                "path": "api/v1",
                "protocols": [
                  "https"
                ],
                "type": "http",
                "subscriptionRequired": true,
                "authenticationSettings": {
                  "oAuth2AuthenticationSettings": [],
                  "openidAuthenticationSettings": []
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis/operations",
              "apiVersion": "2023-05-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('name'), 'data-platform-api', 'get-data')]",
              "properties": {
                "displayName": "Get Data",
                "method": "GET",
                "urlTemplate": "/data/{id}",
                "description": "Retrieve data by ID",
                "templateParameters": [
                  {
                    "name": "id",
                    "description": "Data identifier",
                    "type": "string",
                    "required": true
                  }
                ],
                "request": {
                  "queryParameters": [
                    {
                      "name": "format",
                      "description": "Response format",
                      "type": "string",
                      "defaultValue": "json",
                      "values": [
                        "json",
                        "xml"
                      ]
                    }
                  ]
                },
                "responses": [
                  {
                    "statusCode": 200,
                    "description": "Success",
                    "representations": [
                      {
                        "contentType": "application/json"
                      }
                    ]
                  },
                  {
                    "statusCode": 404,
                    "description": "Not Found"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('name'), 'data-platform-api')]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/backends",
              "apiVersion": "2023-05-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), 'data-backend')]",
              "properties": {
                "description": "Data platform backend services",
                "url": "https://data-backend.internal",
                "protocol": "http",
                "circuitBreaker": {
                  "rules": [
                    {
                      "failureCondition": {
                        "count": 5,
                        "interval": "PT1M",
                        "statusCodeRanges": [
                          {
                            "min": 500,
                            "max": 599
                          }
                        ]
                      },
                      "tripDuration": "PT1M"
                    }
                  ]
                },
                "pool": {
                  "size": 10
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/products",
              "apiVersion": "2023-05-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), 'data-platform-product')]",
              "properties": {
                "displayName": "Data Platform APIs",
                "description": "Comprehensive data platform API product",
                "subscriptionRequired": true,
                "approvalRequired": true,
                "subscriptionsLimit": 100,
                "state": "published"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/products/apis",
              "apiVersion": "2023-05-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('name'), 'data-platform-product', 'data-platform-api')]",
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/products', parameters('name'), 'data-platform-product')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('name'), 'data-platform-api')]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/products/apis",
              "apiVersion": "2023-05-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('name'), 'data-platform-product', 'graphql-api')]",
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/products', parameters('name'), 'data-platform-product')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('name'), 'graphql-api')]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/namedValues",
              "apiVersion": "2023-05-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), 'backend-api-key')]",
              "properties": {
                "displayName": "Backend API Key",
                "secret": true,
                "keyVault": {
                  "secretIdentifier": "[format('{0}secrets/backend-api-key', reference(parameters('keyVaultId'), '2023-07-01').vaultUri)]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/subscriptions",
              "apiVersion": "2023-05-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), 'internal-services')]",
              "properties": {
                "scope": "[format('/products/{0}', 'data-platform-product')]",
                "displayName": "Internal Services Subscription",
                "state": "active",
                "allowTracing": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]",
                "[resourceId('Microsoft.ApiManagement/service/products', parameters('name'), 'data-platform-product')]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.ApiManagement/service/{0}', parameters('name'))]",
              "name": "[format('{0}-logs', parameters('name'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "GatewayLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  },
                  {
                    "category": "WebSocketConnectionLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  }
                ],
                "metrics": [
                  {
                    "category": "Gateway Requests",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  },
                  {
                    "category": "Capacity",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": true,
                      "days": 30
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "apiManagementId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
            },
            "apiManagementName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "apiManagementIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ApiManagement/service', parameters('name')), '2023-05-01-preview', 'full').identity.principalId]"
            },
            "gatewayUrl": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.ApiManagement/service', parameters('name')), '2023-05-01-preview').gatewayUrl)]"
            },
            "developerPortalUrl": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.ApiManagement/service', parameters('name')), '2023-05-01-preview').developerPortalUrl)]"
            },
            "restApiId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ApiManagement/service/apis', parameters('name'), 'data-platform-api')]"
            },
            "graphqlApiId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ApiManagement/service/apis', parameters('name'), 'graphql-api')]"
            },
            "productId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ApiManagement/service/products', parameters('name'), 'data-platform-product')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'keyVault')]",
        "[resourceId('Microsoft.Resources/deployments', 'logging')]",
        "[resourceId('Microsoft.Resources/deployments', 'networking')]",
        "[resourceId('Microsoft.Resources/deployments', 'naming')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "rbacAssignments",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2025-04-01').outputs.storageAccountId.value]"
          },
          "keyVaultId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyVault'), '2025-04-01').outputs.keyVaultId.value]"
          },
          "synapseWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'synapse'), '2025-04-01').outputs.synapseWorkspaceId.value]"
          },
          "aksClusterId": "[if(parameters('deployAKS'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'kubernetes'), '2025-04-01').outputs.aksClusterId.value), createObject('value', ''))]",
          "mlWorkspaceId": "[if(parameters('deployMachineLearning'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'machineLearning'), '2025-04-01').outputs.mlWorkspaceId.value), createObject('value', ''))]",
          "purviewAccountId": "[if(parameters('deployPurview'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'purview'), '2025-04-01').outputs.purviewAccountId.value), createObject('value', ''))]",
          "fabricCapacityId": "[if(parameters('deployFabric'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'fabric'), '2025-04-01').outputs.fabricCapacityId.value), createObject('value', ''))]",
          "deployAKS": {
            "value": "[parameters('deployAKS')]"
          },
          "deployMachineLearning": {
            "value": "[parameters('deployMachineLearning')]"
          },
          "deployPurview": {
            "value": "[parameters('deployPurview')]"
          },
          "deployFabric": {
            "value": "[parameters('deployFabric')]"
          },
          "managedIdentities": {
            "value": {
              "functions": "[reference(resourceId('Microsoft.Resources/deployments', 'appHosting'), '2025-04-01').outputs.functionAppIdentityPrincipalId.value]",
              "logicApps": "[if(parameters('deployLogicApps'), reference(resourceId('Microsoft.Resources/deployments', 'logicApp'), '2025-04-01').outputs.logicAppIdentityPrincipalId.value, '')]",
              "aks": "[if(parameters('deployAKS'), reference(resourceId('Microsoft.Resources/deployments', 'kubernetes'), '2025-04-01').outputs.aksClusterIdentityPrincipalId.value, '')]",
              "ml": "[if(parameters('deployMachineLearning'), reference(resourceId('Microsoft.Resources/deployments', 'machineLearning'), '2025-04-01').outputs.mlWorkspaceIdentityPrincipalId.value, '')]",
              "purview": "[if(parameters('deployPurview'), reference(resourceId('Microsoft.Resources/deployments', 'purview'), '2025-04-01').outputs.purviewIdentityPrincipalId.value, '')]",
              "fabric": "",
              "containers": "[if(parameters('deployContainerInstances'), reference(resourceId('Microsoft.Resources/deployments', 'containerInstances'), '2025-04-01').outputs.containerGroupIdentityPrincipalId.value, '')]"
            }
          },
          "securityGroups": {
            "value": "[parameters('securityGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "12086199418560926579"
            }
          },
          "parameters": {
            "storageAccountId": {
              "type": "string",
              "metadata": {
                "description": "Storage Account resource ID for RBAC assignments"
              }
            },
            "keyVaultId": {
              "type": "string",
              "metadata": {
                "description": "Key Vault resource ID for RBAC assignments"
              }
            },
            "synapseWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Synapse Workspace resource ID for RBAC assignments"
              }
            },
            "aksClusterId": {
              "type": "string",
              "metadata": {
                "description": "AKS Cluster resource ID for RBAC assignments"
              }
            },
            "mlWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Machine Learning Workspace resource ID for RBAC assignments"
              }
            },
            "purviewAccountId": {
              "type": "string",
              "metadata": {
                "description": "Purview Account resource ID for RBAC assignments"
              }
            },
            "fabricCapacityId": {
              "type": "string",
              "metadata": {
                "description": "Fabric Capacity resource ID for RBAC assignments"
              }
            },
            "deployAKS": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Whether AKS is deployed"
              }
            },
            "deployMachineLearning": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Whether Machine Learning is deployed"
              }
            },
            "deployPurview": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Whether Purview is deployed"
              }
            },
            "deployFabric": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Whether Fabric is deployed"
              }
            },
            "managedIdentities": {
              "type": "object",
              "metadata": {
                "description": "Managed Identity Principal IDs"
              }
            },
            "securityGroups": {
              "type": "object",
              "metadata": {
                "description": "Security Group Object IDs"
              }
            }
          },
          "variables": {
            "roles": {
              "storageBlobDataOwner": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
              "storageBlobDataContributor": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
              "storageBlobDataReader": "e9dba6fb-3d52-4bd0-9de6-3d48f1a77c50",
              "keyVaultSecretsOfficer": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7",
              "keyVaultSecretsUser": "4633458b-17de-408a-b874-0445c86b69e6",
              "keyVaultCryptoOfficer": "14b46e9e-c2b7-41b4-b07b-48a6ebf60603",
              "azureKubernetesServiceContributorRole": "ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8",
              "azureKubernetesServiceClusterAdminRole": "0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8",
              "azureMLDataScientist": "f6c7c914-8db3-469d-8ca1-694a8f32e121",
              "azureMLComputeOperator": "e503ece1-11d0-4e8e-8e2c-e5c5e8b8ced1",
              "purviewDataCurator": "8a3c2885-9b38-4fd2-9d99-91d02d8c0800",
              "purviewDataReader": "05d8164f-58ad-4a58-8034-b3e2dedddbf5",
              "fabricAdministrator": "1d9b5dd5-7f00-479c-a9a0-b2ea2ca8bfe2",
              "fabricCapacityAdmin": "4c7c8a82-6af6-4b8b-90c3-e7b5c9e3d8e9",
              "synapseAdministrator": "6e4bf58d-b8f4-4cc5-8ff6-b44e0b568dcc",
              "synapseContributor": "7af0c69a-a548-47d6-aea3-d00e69bd83aa",
              "synapseComputeOperator": "b9e6b3ad-d08a-4a29-aea7-78e2dd4e1b90"
            }
          },
          "resources": [
            {
              "condition": "[not(empty(parameters('securityGroups').platformOperators))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('storageAccountId'), '/')))]",
              "name": "[guid(parameters('storageAccountId'), parameters('securityGroups').platformOperators, 'StorageBlobDataOwner')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').storageBlobDataOwner)]",
                "principalId": "[parameters('securityGroups').platformOperators]",
                "principalType": "Group"
              }
            },
            {
              "condition": "[not(empty(parameters('securityGroups').dataEngineers))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('storageAccountId'), '/')))]",
              "name": "[guid(parameters('storageAccountId'), parameters('securityGroups').dataEngineers, 'StorageBlobDataContributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').storageBlobDataContributor)]",
                "principalId": "[parameters('securityGroups').dataEngineers]",
                "principalType": "Group"
              }
            },
            {
              "condition": "[not(empty(parameters('managedIdentities').functions))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('storageAccountId'), '/')))]",
              "name": "[guid(parameters('storageAccountId'), parameters('managedIdentities').functions, 'StorageBlobDataContributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').storageBlobDataContributor)]",
                "principalId": "[parameters('managedIdentities').functions]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('managedIdentities').logicApps))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('storageAccountId'), '/')))]",
              "name": "[guid(parameters('storageAccountId'), parameters('managedIdentities').logicApps, 'StorageBlobDataContributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').storageBlobDataContributor)]",
                "principalId": "[parameters('managedIdentities').logicApps]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('managedIdentities').aks))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('storageAccountId'), '/')))]",
              "name": "[guid(parameters('storageAccountId'), parameters('managedIdentities').aks, 'StorageBlobDataContributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').storageBlobDataContributor)]",
                "principalId": "[parameters('managedIdentities').aks]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('managedIdentities').purview))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('storageAccountId'), '/')))]",
              "name": "[guid(parameters('storageAccountId'), parameters('managedIdentities').purview, 'StorageBlobDataReader')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').storageBlobDataReader)]",
                "principalId": "[parameters('managedIdentities').purview]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('securityGroups').platformOperators))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', last(split(parameters('keyVaultId'), '/')))]",
              "name": "[guid(parameters('keyVaultId'), parameters('securityGroups').platformOperators, 'KeyVaultSecretsOfficer')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').keyVaultSecretsOfficer)]",
                "principalId": "[parameters('securityGroups').platformOperators]",
                "principalType": "Group"
              }
            },
            {
              "condition": "[not(empty(parameters('managedIdentities').functions))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', last(split(parameters('keyVaultId'), '/')))]",
              "name": "[guid(parameters('keyVaultId'), parameters('managedIdentities').functions, 'KeyVaultSecretsUser')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').keyVaultSecretsUser)]",
                "principalId": "[parameters('managedIdentities').functions]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('managedIdentities').logicApps))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', last(split(parameters('keyVaultId'), '/')))]",
              "name": "[guid(parameters('keyVaultId'), parameters('managedIdentities').logicApps, 'KeyVaultSecretsUser')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').keyVaultSecretsUser)]",
                "principalId": "[parameters('managedIdentities').logicApps]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('managedIdentities').ml))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', last(split(parameters('keyVaultId'), '/')))]",
              "name": "[guid(parameters('keyVaultId'), parameters('managedIdentities').ml, 'KeyVaultCryptoOfficer')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').keyVaultCryptoOfficer)]",
                "principalId": "[parameters('managedIdentities').ml]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('managedIdentities').aks))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', last(split(parameters('keyVaultId'), '/')))]",
              "name": "[guid(parameters('keyVaultId'), parameters('managedIdentities').aks, 'KeyVaultSecretsUser')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').keyVaultSecretsUser)]",
                "principalId": "[parameters('managedIdentities').aks]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('managedIdentities').purview))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', last(split(parameters('keyVaultId'), '/')))]",
              "name": "[guid(parameters('keyVaultId'), parameters('managedIdentities').purview, 'KeyVaultSecretsUser')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').keyVaultSecretsUser)]",
                "principalId": "[parameters('managedIdentities').purview]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('securityGroups').platformOperators))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', last(split(parameters('aksClusterId'), '/')))]",
              "name": "[guid(parameters('aksClusterId'), parameters('securityGroups').platformOperators, 'AzureKubernetesServiceClusterAdminRole')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').azureKubernetesServiceClusterAdminRole)]",
                "principalId": "[parameters('securityGroups').platformOperators]",
                "principalType": "Group"
              }
            },
            {
              "condition": "[not(empty(parameters('securityGroups').dataEngineers))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', last(split(parameters('aksClusterId'), '/')))]",
              "name": "[guid(parameters('aksClusterId'), parameters('securityGroups').dataEngineers, 'AzureKubernetesServiceContributorRole')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').azureKubernetesServiceContributorRole)]",
                "principalId": "[parameters('securityGroups').dataEngineers]",
                "principalType": "Group"
              }
            },
            {
              "condition": "[not(empty(parameters('securityGroups').platformOperators))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', last(split(parameters('mlWorkspaceId'), '/')))]",
              "name": "[guid(parameters('mlWorkspaceId'), parameters('securityGroups').platformOperators, 'AzureMLDataScientist')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').azureMLDataScientist)]",
                "principalId": "[parameters('securityGroups').platformOperators]",
                "principalType": "Group"
              }
            },
            {
              "condition": "[not(empty(parameters('securityGroups').dataEngineers))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', last(split(parameters('mlWorkspaceId'), '/')))]",
              "name": "[guid(parameters('mlWorkspaceId'), parameters('securityGroups').dataEngineers, 'AzureMLComputeOperator')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').azureMLComputeOperator)]",
                "principalId": "[parameters('securityGroups').dataEngineers]",
                "principalType": "Group"
              }
            },
            {
              "condition": "[not(empty(parameters('securityGroups').platformOperators))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Purview/accounts/{0}', last(split(parameters('purviewAccountId'), '/')))]",
              "name": "[guid(parameters('purviewAccountId'), parameters('securityGroups').platformOperators, 'PurviewDataCurator')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').purviewDataCurator)]",
                "principalId": "[parameters('securityGroups').platformOperators]",
                "principalType": "Group"
              }
            },
            {
              "condition": "[not(empty(parameters('securityGroups').dataEngineers))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Purview/accounts/{0}', last(split(parameters('purviewAccountId'), '/')))]",
              "name": "[guid(parameters('purviewAccountId'), parameters('securityGroups').dataEngineers, 'PurviewDataReader')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').purviewDataReader)]",
                "principalId": "[parameters('securityGroups').dataEngineers]",
                "principalType": "Group"
              }
            },
            {
              "condition": "[not(empty(parameters('securityGroups').platformOperators))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Fabric/capacities/{0}', last(split(parameters('fabricCapacityId'), '/')))]",
              "name": "[guid(parameters('fabricCapacityId'), parameters('securityGroups').platformOperators, 'FabricAdministrator')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').fabricAdministrator)]",
                "principalId": "[parameters('securityGroups').platformOperators]",
                "principalType": "Group"
              }
            },
            {
              "condition": "[not(empty(parameters('securityGroups').dataEngineers))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Fabric/capacities/{0}', last(split(parameters('fabricCapacityId'), '/')))]",
              "name": "[guid(parameters('fabricCapacityId'), parameters('securityGroups').dataEngineers, 'FabricCapacityAdmin')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').fabricCapacityAdmin)]",
                "principalId": "[parameters('securityGroups').dataEngineers]",
                "principalType": "Group"
              }
            },
            {
              "condition": "[not(empty(parameters('securityGroups').platformOperators))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Synapse/workspaces/{0}', last(split(parameters('synapseWorkspaceId'), '/')))]",
              "name": "[guid(parameters('synapseWorkspaceId'), parameters('securityGroups').platformOperators, 'SynapseAdministrator')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').synapseAdministrator)]",
                "principalId": "[parameters('securityGroups').platformOperators]",
                "principalType": "Group"
              }
            },
            {
              "condition": "[not(empty(parameters('securityGroups').dataEngineers))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Synapse/workspaces/{0}', last(split(parameters('synapseWorkspaceId'), '/')))]",
              "name": "[guid(parameters('synapseWorkspaceId'), parameters('securityGroups').dataEngineers, 'SynapseContributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').synapseContributor)]",
                "principalId": "[parameters('securityGroups').dataEngineers]",
                "principalType": "Group"
              }
            },
            {
              "condition": "[not(empty(parameters('managedIdentities').functions))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Synapse/workspaces/{0}', last(split(parameters('synapseWorkspaceId'), '/')))]",
              "name": "[guid(parameters('synapseWorkspaceId'), parameters('managedIdentities').functions, 'SynapseComputeOperator')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').synapseComputeOperator)]",
                "principalId": "[parameters('managedIdentities').functions]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('managedIdentities').ml))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Synapse/workspaces/{0}', last(split(parameters('synapseWorkspaceId'), '/')))]",
              "name": "[guid(parameters('synapseWorkspaceId'), parameters('managedIdentities').ml, 'SynapseContributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roles').synapseContributor)]",
                "principalId": "[parameters('managedIdentities').ml]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "rbacAssignmentsSummary": {
              "type": "object",
              "value": {
                "storageAccount": {
                  "platformOperators": "[guid(parameters('storageAccountId'), parameters('securityGroups').platformOperators, 'StorageBlobDataOwner')]",
                  "functions": "[guid(parameters('storageAccountId'), parameters('managedIdentities').functions, 'StorageBlobDataContributor')]",
                  "logicApps": "[guid(parameters('storageAccountId'), parameters('managedIdentities').logicApps, 'StorageBlobDataContributor')]",
                  "aks": "[guid(parameters('storageAccountId'), parameters('managedIdentities').aks, 'StorageBlobDataContributor')]",
                  "purview": "[guid(parameters('storageAccountId'), parameters('managedIdentities').purview, 'StorageBlobDataReader')]"
                },
                "keyVault": {
                  "platformOperators": "[guid(parameters('keyVaultId'), parameters('securityGroups').platformOperators, 'KeyVaultSecretsOfficer')]",
                  "functions": "[guid(parameters('keyVaultId'), parameters('managedIdentities').functions, 'KeyVaultSecretsUser')]",
                  "logicApps": "[guid(parameters('keyVaultId'), parameters('managedIdentities').logicApps, 'KeyVaultSecretsUser')]",
                  "ml": "[guid(parameters('keyVaultId'), parameters('managedIdentities').ml, 'KeyVaultCryptoOfficer')]",
                  "aks": "[guid(parameters('keyVaultId'), parameters('managedIdentities').aks, 'KeyVaultSecretsUser')]",
                  "purview": "[guid(parameters('keyVaultId'), parameters('managedIdentities').purview, 'KeyVaultSecretsUser')]"
                },
                "aksCluster": {
                  "platformOperators": "[guid(parameters('aksClusterId'), parameters('securityGroups').platformOperators, 'AzureKubernetesServiceClusterAdminRole')]",
                  "dataEngineers": "[guid(parameters('aksClusterId'), parameters('securityGroups').dataEngineers, 'AzureKubernetesServiceContributorRole')]"
                },
                "mlWorkspace": {
                  "platformOperators": "[guid(parameters('mlWorkspaceId'), parameters('securityGroups').platformOperators, 'AzureMLDataScientist')]",
                  "dataEngineers": "[guid(parameters('mlWorkspaceId'), parameters('securityGroups').dataEngineers, 'AzureMLComputeOperator')]"
                },
                "purviewAccount": {
                  "platformOperators": "[guid(parameters('purviewAccountId'), parameters('securityGroups').platformOperators, 'PurviewDataCurator')]",
                  "dataEngineers": "[guid(parameters('purviewAccountId'), parameters('securityGroups').dataEngineers, 'PurviewDataReader')]"
                },
                "fabricCapacity": {
                  "platformOperators": "[guid(parameters('fabricCapacityId'), parameters('securityGroups').platformOperators, 'FabricAdministrator')]",
                  "dataEngineers": "[guid(parameters('fabricCapacityId'), parameters('securityGroups').dataEngineers, 'FabricCapacityAdmin')]"
                },
                "synapseWorkspace": {
                  "platformOperators": "[guid(parameters('synapseWorkspaceId'), parameters('securityGroups').platformOperators, 'SynapseAdministrator')]",
                  "dataEngineers": "[guid(parameters('synapseWorkspaceId'), parameters('securityGroups').dataEngineers, 'SynapseContributor')]",
                  "functions": "[guid(parameters('synapseWorkspaceId'), parameters('managedIdentities').functions, 'SynapseComputeOperator')]",
                  "ml": "[guid(parameters('synapseWorkspaceId'), parameters('managedIdentities').ml, 'SynapseContributor')]"
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'appHosting')]",
        "[resourceId('Microsoft.Resources/deployments', 'containerInstances')]",
        "[resourceId('Microsoft.Resources/deployments', 'fabric')]",
        "[resourceId('Microsoft.Resources/deployments', 'keyVault')]",
        "[resourceId('Microsoft.Resources/deployments', 'kubernetes')]",
        "[resourceId('Microsoft.Resources/deployments', 'logicApp')]",
        "[resourceId('Microsoft.Resources/deployments', 'machineLearning')]",
        "[resourceId('Microsoft.Resources/deployments', 'purview')]",
        "[resourceId('Microsoft.Resources/deployments', 'storage')]",
        "[resourceId('Microsoft.Resources/deployments', 'synapse')]"
      ]
    }
  ],
  "outputs": {
    "storageAccountId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2025-04-01').outputs.storageAccountId.value]"
    },
    "synapseWorkspaceName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'synapse'), '2025-04-01').outputs.synapseWorkspaceName.value]"
    },
    "functionAppName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appHosting'), '2025-04-01').outputs.functionAppName.value]"
    },
    "logicAppName": {
      "type": "string",
      "value": "[if(parameters('deployLogicApps'), reference(resourceId('Microsoft.Resources/deployments', 'logicApp'), '2025-04-01').outputs.logicAppName.value, '')]"
    },
    "eventGridTopicEndpoint": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'eventing'), '2025-04-01').outputs.eventGridTopicEndpoint.value]"
    },
    "azureMapsAccountId": {
      "type": "string",
      "value": "[if(parameters('deployAzureMaps'), reference(resourceId('Microsoft.Resources/deployments', 'azureMaps'), '2025-04-01').outputs.mapsAccountId.value, '')]"
    },
    "cognitiveAccountId": {
      "type": "string",
      "value": "[if(parameters('deployCognitiveServices'), reference(resourceId('Microsoft.Resources/deployments', 'cognitiveServices'), '2025-04-01').outputs.cognitiveAccountId.value, '')]"
    },
    "cognitiveAccountEndpoint": {
      "type": "string",
      "value": "[if(parameters('deployCognitiveServices'), reference(resourceId('Microsoft.Resources/deployments', 'cognitiveServices'), '2025-04-01').outputs.cognitiveAccountEndpoint.value, '')]"
    },
    "purviewAccountId": {
      "type": "string",
      "value": "[if(parameters('deployPurview'), reference(resourceId('Microsoft.Resources/deployments', 'purview'), '2025-04-01').outputs.purviewAccountId.value, '')]"
    },
    "purviewAccountName": {
      "type": "string",
      "value": "[if(parameters('deployPurview'), reference(resourceId('Microsoft.Resources/deployments', 'purview'), '2025-04-01').outputs.purviewAccountName.value, '')]"
    },
    "purviewAccountEndpoint": {
      "type": "string",
      "value": "[if(parameters('deployPurview'), reference(resourceId('Microsoft.Resources/deployments', 'purview'), '2025-04-01').outputs.purviewAccountEndpoint.value, '')]"
    },
    "mlWorkspaceId": {
      "type": "string",
      "value": "[if(parameters('deployMachineLearning'), reference(resourceId('Microsoft.Resources/deployments', 'machineLearning'), '2025-04-01').outputs.mlWorkspaceId.value, '')]"
    },
    "mlWorkspaceName": {
      "type": "string",
      "value": "[if(parameters('deployMachineLearning'), reference(resourceId('Microsoft.Resources/deployments', 'machineLearning'), '2025-04-01').outputs.mlWorkspaceName.value, '')]"
    },
    "aksClusterId": {
      "type": "string",
      "value": "[if(parameters('deployAKS'), reference(resourceId('Microsoft.Resources/deployments', 'kubernetes'), '2025-04-01').outputs.aksClusterId.value, '')]"
    },
    "aksClusterName": {
      "type": "string",
      "value": "[if(parameters('deployAKS'), reference(resourceId('Microsoft.Resources/deployments', 'kubernetes'), '2025-04-01').outputs.aksClusterName.value, '')]"
    },
    "fabricCapacityId": {
      "type": "string",
      "value": "[if(parameters('deployFabric'), reference(resourceId('Microsoft.Resources/deployments', 'fabric'), '2025-04-01').outputs.fabricCapacityId.value, '')]"
    },
    "fabricCapacityName": {
      "type": "string",
      "value": "[if(parameters('deployFabric'), reference(resourceId('Microsoft.Resources/deployments', 'fabric'), '2025-04-01').outputs.fabricCapacityName.value, '')]"
    },
    "containerInstancesId": {
      "type": "string",
      "value": "[if(parameters('deployContainerInstances'), reference(resourceId('Microsoft.Resources/deployments', 'containerInstances'), '2025-04-01').outputs.containerGroupId.value, '')]"
    },
    "apiGatewayId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'comprehensiveApiGateway'), '2025-04-01').outputs.apiManagementId.value]"
    },
    "apiGatewayUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'comprehensiveApiGateway'), '2025-04-01').outputs.gatewayUrl.value]"
    },
    "rbacAssignmentStatus": {
      "type": "object",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'rbacAssignments'), '2025-04-01').outputs.rbacAssignmentsSummary.value]"
    }
  }
}